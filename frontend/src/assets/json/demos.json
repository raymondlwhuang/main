[
  {
    "snips": [
      "@Input()  user: User;",
      "@Input()  parentClick: Subject &lt;void&gt;",
      "parentClick:Subject<void> = new Subject<void>();"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea72507c6f8f22e203b94f9",
    "output": [],
    "id": "a967a36d-e9ad-4ca1-abc3-e2718f0935f7",
    "group": "decorator",
    "name": "Input",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "@Output() onSelect: EventEmitter<User>  = new EventEmitter;"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea72584c6f8f22e203b94fa",
    "output": [],
    "id": "39001f36-596e-4ed8-aa80-8a253a012808",
    "group": "decorator",
    "name": "Output",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "@ViewChild('selectRef', {static: false}) selectEleRef : ElementRef;",
      "@ViewChild(UserListComponent,{static:false}) userListComponent : UserListComponent;"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea73363c6f8f22e203b94fb",
    "output": [],
    "id": "8457b24a-0687-4c8b-ba18-6e6b873fba9d",
    "group": "decorator",
    "name": "ViewChild",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "@ViewChildren(ShowCaseComponent) showCaseComponent:ShowCaseComponent;"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea73aa9c6f8f22e203b94fd",
    "output": [],
    "id": "6d1f3969-aea2-4034-a287-03ba39ff56ac",
    "group": "decorator",
    "name": "ViewChildren",
    "__v": 0
  },
  {
    "snips": [
      "@Directive({selector: '[appMediaQueryFlexbox]'})"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea73b5bc6f8f22e203b94fe",
    "output": [],
    "id": "0175c5c6-b087-4fd8-b84a-f2488a040ceb",
    "group": "decorator",
    "name": "Directive",
    "helpPath": "angular/media-query-flexbox.directive.txt",
    "__v": 0
  },
  {
    "snips": [
      "@HostListener('mouseover') onMouseOver() {this.ishovering = true;}"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea74f6ac6f8f22e203b94ff",
    "output": [],
    "id": "5d0eaeee-a4f6-4c10-8ebe-49bc2635e8e2",
    "group": "decorator",
    "name": "HostListener",
    "helpPath": "angular/hover-item.directive.txt",
    "__v": 0
  },
  {
    "snips": [
      "@HostBinding('class.item-mouse-over') ishovering: boolean;"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea74f92c6f8f22e203b9500",
    "output": [],
    "id": "ae9e4b84-b519-4c81-a345-72838f0ef636",
    "group": "decorator",
    "name": "HostBinding",
    "helpPath": "angular/hover-item.directive.txt",
    "__v": 0
  },
  {
    "snips": [
      "Subscribe to Observables in order but only when the previous completes"
    ],
    "outputs": [],
    "indicator": 1,
    "accepted": true,
    "_id": "5ea74fc4c6f8f22e203b9501",
    "output": [],
    "id": "d749657c-1335-484a-8df9-cf440cb33e81",
    "group": "Rxjs",
    "name": "concat",
    "helpPath": "rxjs/concat.txt",
    "__v": 0
  },
  {
    "snips": [
      "Don’t let me know until all the Observables are complete, then give me all the values at once. ( Array )"
    ],
    "outputs": [],
    "indicator": 1,
    "accepted": true,
    "_id": "5ea75015c6f8f22e203b9502",
    "output": [],
    "id": "dac7b59a-4dc5-474d-a62e-df249f3c7b8d",
    "group": "Rxjs",
    "name": "forkJoin",
    "helpPath": "rxjs/forkJoin.txt",
    "__v": 0
  },
  {
    "snips": [
      "Only when the inner Observable emits, let me know by merging the value to the outer Observable."
    ],
    "outputs": [],
    "indicator": 1,
    "accepted": true,
    "_id": "5ea75356c6f8f22e203b9503",
    "output": [],
    "id": "7fc8938c-1bcb-447a-8181-26b447a44c3d",
    "group": "Rxjs",
    "name": "mergeMap",
    "helpPath": "rxjs/mergeMap.txt",
    "__v": 0
  },
  {
    "snips": [
      "Let me know when the Observable emits, but also give me the previous value. ( Array )"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea754eac6f8f22e203b9504",
    "output": [],
    "id": "5999af83-871a-4266-80e6-ae8e06fbbf3c",
    "group": "Rxjs",
    "name": "pairwise",
    "helpPath": "rxjs/pairwise.txt",
    "__v": 0
  },
  {
    "snips": [
      "Like mergeMap but when the source Observable emits cancel any previous subscriptions of the inner Observable"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7558ac6f8f22e203b9505",
    "output": [],
    "id": "f19da1a1-49ca-4987-9d73-60fdeb66a00c",
    "group": "Rxjs",
    "name": "switchMap",
    "helpPath": "rxjs/switchMap.txt",
    "__v": 0
  },
  {
    "snips": [
      "Let me know when any Observable emits but also give me the latest value from the others. ( Array )"
    ],
    "outputs": [],
    "indicator": 1,
    "accepted": true,
    "_id": "5ea79e17c6f8f22e203b9507",
    "output": [],
    "id": "a719688e-50b8-4e0b-9dfd-a1d395510462",
    "group": "Rxjs",
    "name": "combineLatest",
    "helpPath": "rxjs/combineLatest.txt",
    "__v": 0
  },
  {
    "snips": [
      "Perform a side effect for every emission on the source Observable, but return an Observable that is identical to the source"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea79e52c6f8f22e203b9508",
    "output": [],
    "id": "f02aaf8e-7715-493c-9385-df9f6d5bf16d",
    "group": "Rxjs",
    "name": "tap",
    "__v": 0
  },
  {
    "snips": [
      "Maps each source value (an object) to its specified nested property."
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea79e8cc6f8f22e203b9509",
    "output": [],
    "id": "64be079f-67f3-4bff-9a9a-64a05a3d0140",
    "group": "Rxjs",
    "name": "pluck",
    "helpPath": "rxjs/pluck.txt",
    "__v": 0
  },
  {
    "snips": [
      "Emits a value from the source Observable only after a particular time span determined by another Observable has passed without another source emission"
    ],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea79eb5c6f8f22e203b950a",
    "output": [],
    "id": "bcbefa98-bf6c-4c3e-b009-dd71c4ae44c1",
    "group": "Rxjs",
    "name": "debounce",
    "__v": 0
  },
  {
    "snips": [
      "Emits a value from the source Observable, then ignores subsequent source values for a duration determined by another Observable, then repeats this process"
    ],
    "outputs": [
      ""
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea79ee5c6f8f22e203b950b",
    "output": [],
    "id": "fdb6d734-b76a-4562-baf9-94a065ec5ad9",
    "group": "Rxjs",
    "name": "throttle",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "this.employees.forEach(employee=> {if(employee.eyeColor=='green') this.dataDispInTable.push(employee)});"
    ],
    "outputs": [
      "calls a function once for each element in an array, in order."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a2eac6f8f22e203b950c",
    "output": [],
    "id": "9c932194-0bea-49f0-950c-a46e436dde7a",
    "group": "array",
    "name": "forEach",
    "__v": 0
  },
  {
    "snips": [
      "this.dataDispInTable = this.employees.filter(employee => employee.eyeColor=='blue');"
    ],
    "outputs": [
      "creates an array filled with all array elements that pass a test (provided as a function)"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a304c6f8f22e203b950d",
    "output": [],
    "id": "dee185b4-212a-4dab-9b36-d19e41e4bf95",
    "group": "array",
    "name": "filter",
    "__v": 0
  },
  {
    "snips": [
      "this.dataDispInTable = this.employees.slice();",
      "this.dataDispInTable.sort((employee,employee1) =>employee.age > employee1.age ? 1 : -1);"
    ],
    "outputs": [
      "sorts the items of an array."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a31dc6f8f22e203b950e",
    "output": [],
    "id": "bdb06669-c5c4-4c99-910f-9a26e2ad7c2c",
    "group": "array",
    "name": "sort",
    "__v": 0
  },
  {
    "snips": [
      "this.dataDispInTable = [];",
      "this.dataDispInTable.push(this.employees.find(employee => employee.age < 22));"
    ],
    "outputs": [
      "returns the value of the first element in an array that pass a test (provided as a function)"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a33ec6f8f22e203b950f",
    "output": [],
    "id": "b130c5c4-9c4b-48cb-a7e3-269b8b45e4d5",
    "group": "array",
    "name": "find",
    "__v": 0
  },
  {
    "snips": [
      "this.dataDispInTable = this.employees.slice();",
      "this.dataDispInTable.pop();"
    ],
    "outputs": [
      "removes the last element of an array, and returns that element."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a35bc6f8f22e203b9510",
    "output": [],
    "id": "7747e911-fd0c-4abf-9418-dfd6a0239a24",
    "group": "array",
    "name": "pop",
    "__v": 0
  },
  {
    "snips": [
      "this.dataDispInTable = this.employees.slice();",
      "this.dataDispInTable.shift();"
    ],
    "outputs": [
      "removes the first item of an array."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a373c6f8f22e203b9511",
    "output": [],
    "id": "61268bb3-9579-43ea-a2dd-704670ff7011",
    "group": "array",
    "name": "shift",
    "__v": 0
  },
  {
    "snips": [
      "this.dataDispInTable = this.employees.slice();",
      "this.dataDispInTable = this.dataDispInTable.slice(1, 3);"
    ],
    "outputs": [
      "returns the selected elements in an array, as a new array object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a38ec6f8f22e203b9512",
    "output": [],
    "id": "0f036065-3458-4035-b712-f6d85c6cf6c1",
    "group": "array",
    "name": "slice",
    "__v": 0
  },
  {
    "snips": [
      "let doWhatever = function (a,b){",
      "&nbsp;&nbsp;&nbsp;return `This is the two numbers you just entered ${a}, ${b}`;",
      "};",
      "let myFunction = function (a,b, callback){",
      "&nbsp;&nbsp;&nbsp;return callback(a,b);",
      "};",
      "let output = myFunction(2,3,doWhatever);",
      "document.getElementById('output').innerHTML = output;"
    ],
    "outputs": [
      "A JavaScript Callback Function is a function that is passed as a parameter to another JavaScript function, and the callback function is run inside of the function it was passed into",
      "JavaScript Callback Functions can be used synchronously or asynchronously",
      "This is the two numbers you just entered 2, 3  //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a421c6f8f22e203b9513",
    "output": [],
    "id": "3d97b86b-09f5-481b-b28d-001fa3701203",
    "group": "function",
    "name": "callback",
    "__v": 0
  },
  {
    "snips": [
      "let name = {",
      "&nbsp;&nbsp;&nbsp;firstname: 'Roger',",
      "&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
      "}",
      "let printFullName =  function (city){",
      "&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in '+ city;",
      "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
      "}",
      "printFullName.call(name,'markham');"
    ],
    "outputs": [
      "Roger Huang is living in markham",
      "this refers to the \"owner\" of the function"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a4a9c6f8f22e203b9514",
    "output": [],
    "id": "cd6f5d0b-845d-4ee2-8ad1-3eace313bdfe",
    "group": "function",
    "name": "call",
    "__v": 0
  },
  {
    "snips": [
      "let printFullName =  function (city,province){",
      "&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in ' +city + ', '+ province;",
      "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
      "}",
      "let name =  {",
      "&nbsp;&nbsp;&nbsp;firstname: 'Roger',",
      "&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
      "}",
      "printFullName.apply(name,[\"Markham\",\"Ontario\"]);"
    ],
    "outputs": [
      "invoke a function as a method of an object",
      "Roger Huang is living in Markham, Ontario  //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a531c6f8f22e203b9515",
    "output": [],
    "id": "e4612099-b29e-44bb-8a58-6c5ba6d9490a",
    "group": "function",
    "name": "apply",
    "__v": 0
  },
  {
    "snips": [
      "let printFullName =  function (city,province){",
      "&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in ' +city + ', '+ province;",
      "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
      "}",
      "let name =  {",
      "&nbsp;&nbsp;&nbsp;firstname: 'Cindy',",
      "&nbsp;&nbsp;&nbsp;lastname: 'Woo',",
      "}",
      "let printMyName = printFullName.bind(name);",
      "printMyName('Toronto','Ontario');"
    ],
    "outputs": [
      "The bind() method creates a new function that, when called, has its this keyword set to the provided value, ",
      "with a given sequence of arguments preceding any provided when the new function is called.",
      "Cindy Woo is living in Toronto, Ontario //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a5bec6f8f22e203b9516",
    "output": [],
    "id": "bda2edf7-4282-4795-a814-f140f9be1739",
    "group": "function",
    "name": "bind",
    "__v": 0
  },
  {
    "snips": [
      "let printName =  function (city,province,country){",
      "&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname +'&nbsp;is lived in ' + city + ', '+ province + ', '+ country;",
      "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;",
      "}",
      "let name =  {",
      "&nbsp;&nbsp;&nbsp;firstname: 'Roger',",
      "&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
      "}",
      "Function.prototype.mybind = function(...args){",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let obj = this;",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let params = args.slice(1);",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return function (...args2) {",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.apply(args[0],[...params,...args2]);",
      "&nbsp;&nbsp;&nbsp;}",
      "}",
      "let printMyName2 = printName.mybind(name,'Markham','Ontario');",
      "printMyName2('Canada');"
    ],
    "outputs": [
      "Roger Huang is lived in Markham, Ontario, Canada"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a69dc6f8f22e203b9517",
    "output": [],
    "id": "c4cf0178-add9-47c7-ae81-d05b1eeee69b",
    "group": "function",
    "name": "polyfill for bind",
    "__v": 0
  },
  {
    "snips": [
      "let promiseCount = 0;",
      "function MyDecision(wontDo) {",
      "&nbsp;&nbsp;&nbsp;promiseCount++;",
      "&nbsp;&nbsp;&nbsp;let log = document.getElementById('output');",
      "&nbsp;&nbsp;&nbsp;if(wontDo) log.innerHTML += promiseCount +') Do not want do my job(<small>Start looking at the task</small>)';",
      "&nbsp;&nbsp;&nbsp;else log.innerHTML += promiseCount +') Started doing my job(<small>Beging my task</small>)';",
      "&nbsp;&nbsp;&nbsp;let promise1 = new Promise((resolve, reject) => {",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wontDo) return reject([promiseCount,'I am tired']);",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.innerHTML += promiseCount +') Working as promised (<small>promise started</small>)';",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(() =>resolve(promiseCount), Math.random() * 2000 + 1000);",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}",
      "&nbsp;&nbsp;&nbsp;}",
      "&nbsp;&nbsp;&nbsp;).then((val) =>log.innerHTML += val +') My job is done (<small>promise fullfiled and ended</small>)')",
      "&nbsp;&nbsp;&nbsp;.catch((reason) =>log.innerHTML += reason[0] +') Promise rejected resason: ' + reason[1]+'');",
      "&nbsp;&nbsp;&nbsp;log.innerHTML += promiseCount +') Promise ' + (wontDo ? 'rejected' : '&nbsp;made') + '(<small>Sync code terminated</small>)",
      "}"
    ],
    "outputs": [
      "A Promise object represents a value that may not be available yet, but will be resolved at some point in the future. ",
      "It allows you to write asynchronous code in a more synchronous fashion. "
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a79cc6f8f22e203b9518",
    "output": [],
    "id": "bc929229-34e9-4eeb-960b-feef33c61be8",
    "group": "function",
    "name": "promise",
    "__v": 0
  },
  {
    "snips": [
      "let ages = [3, 10, 18, 20];",
      "function checkAdult(age) {",
      "&nbsp;&nbsp;&nbsp;return age >= 18;",
      "}",
      "function myFunction() {",
      "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = ages.findIndex(checkAdult);",
      "}"
    ],
    "outputs": [
      "The findIndex() method returns the index of the first element in an array that pass a test (provided as a function)",
      "2 //Output of example of Code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a803c6f8f22e203b9519",
    "output": [],
    "id": "5e32ea38-45c0-4b53-b60a-ed943bd692b3",
    "group": "function",
    "name": "findIndex",
    "__v": 0
  },
  {
    "snips": [
      "function myFunction() {",
      "&nbsp;&nbsp;&nbsp;let str = 'Hello world, welcome to the universe.';",
      "&nbsp;&nbsp;&nbsp;let n = str.includes('world');",
      "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = n;",
      "}"
    ],
    "outputs": [
      "true",
      "The includes() method determines whether a string contains the characters of a specified string."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a85ac6f8f22e203b951a",
    "output": [],
    "id": "140f8bc1-3f3c-4725-96b9-821e680f5515",
    "group": "function",
    "name": "includes",
    "__v": 0
  },
  {
    "snips": [
      "const str1 = '5';",
      "document.getElementById('output').innerHTML = str1.padStart(2, '0'));",
      "const fullNumber = '2034399002125581';",
      "const last4Digits = fullNumber.slice(-4);",
      "const maskedNumber = last4Digits.padStart(fullNumber.length, '*');",
      "document.getElementById('output').innerHTML = maskedNumber);"
    ],
    "outputs": [
      "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. ",
      "The padding is applied from the start of the current string",
      "05  //Output of example code snip",
      "************5581  //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a8c4c6f8f22e203b951b",
    "output": [],
    "id": "6f6d5ad2-cfd7-423f-870e-8b3fc42c1a6b",
    "group": "function",
    "name": "padStart",
    "__v": 0
  },
  {
    "snips": [
      "const str1 = 'Breaded Mushrooms';",
      "document.getElementById('output').innerHTML = str1.padEnd(25, '.');",
      "const str2 = '200';",
      "document.getElementById('output').innerHTML = str2.padEnd(5,'*');"
    ],
    "outputs": [
      "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. ",
      "The padding is applied from the end of the current string",
      "Breaded Mushrooms........ //Output of example code snip",
      "200**  //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a917c6f8f22e203b951c",
    "output": [],
    "id": "30c2e799-c990-45ec-8ec1-ed59c2863fdd",
    "group": "function",
    "name": "padEnd",
    "__v": 0
  },
  {
    "snips": [
      "function resolveAfter2Seconds(x) {",
      "&nbsp;return new Promise(resolve => {",
      "&nbsp;&nbsp;setTimeout(() => {",
      "&nbsp;&nbsp;&nbsp;resolve(x);",
      "&nbsp;&nbsp;}, 2000);",
      "&nbsp;});",
      "}",
      "async function f1() {",
      "&nbsp;var x = await resolveAfter2Seconds(10);",
      "&nbsp;document.getElementById('output').innerHTML = x;",
      "}",
      "f1();"
    ],
    "outputs": [
      "The await operator is used to wait for a Promise. It can only be used inside an async function",
      "10 //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7a9acc6f8f22e203b951d",
    "output": [],
    "id": "66d7d97f-578b-4290-962f-272dd47c9814",
    "group": "function",
    "name": "await",
    "__v": 0
  },
  {
    "snips": [
      "const object1 = {",
      "&nbsp;a: 'somestring',",
      "&nbsp;b: 42",
      "};",
      "for (let [key, value] of Object.entries(object1)) {",
      "&nbsp;document.getElementById('output').innerHTML = `${key}: ${value}`;",
      "}"
    ],
    "outputs": [
      "The entries() method returns an Array Iterator object with key/value pairs.",
      "a: somestring  //Output of example code snip",
      "b: 42 //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7aa15c6f8f22e203b951e",
    "output": [],
    "id": "1b87e2e8-45dc-481d-b659-cd063645f0d7",
    "group": "function",
    "name": "Object.entries",
    "__v": 0
  },
  {
    "snips": [
      "const object1 = {",
      "&nbsp;a: 'somestring',",
      "&nbsp;b: 42,",
      "&nbsp;c: false",
      "};",
      "document.getElementById('output').innerHTML = Object.values(object1);"
    ],
    "outputs": [
      "The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop.",
      "Array ['somestring', 42, false]  //Output of example code snip"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea7aa77c6f8f22e203b951f",
    "output": [],
    "id": "6e08f0e0-cd52-4fc6-830e-20f13c406255",
    "group": "function",
    "name": "Object.values",
    "__v": 0
  },
  {
    "snips": [],
    "outputs": [],
    "indicator": 0,
    "accepted": true,
    "_id": "5ea881a3dfe2f453c8706a99",
    "group": "",
    "name": "",
    "helpPath": "",
    "__v": 0,
    "id": "0"
  },
  {
    "snips": [
      "let ageList = this.employees.slice().map(employee=>employee.age); ",
      "let msg = \"Grand Total of age is: \" + ageList.reduce((total : number,age : number)=>total + age); ",
      "timer(2000).subscribe(() => this.htmlConsole(msg));   //htmlConsole is a customized decorator created by me for the purpose of display console.log to html element"
    ],
    "outputs": [
      "reduces the array to a single value."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5eac7f5dd8ded93c207f4ffb",
    "id": "d362866f-58f8-4398-b6c4-776a5ac61aa6",
    "group": "array",
    "name": "reduce",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "The earlier versions of JS allow the usage of undeclared variables. But when the es5 ‘use strict’ feature is used, an error is reported."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eadda8ad8ded93c207f4ffc",
    "id": "db69d3b5-444e-481b-bdce-df37d321ce85",
    "group": "JsByVersion",
    "name": "use strict",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let arr = [1,2,3,4];",
      "let a = 3;",
      "console.log(Array.isArray(arr)); //returns true",
      "console.log(Array.isArray(a)); //returns false"
    ],
    "outputs": [
      "This method checks if the object is an array or not and returns the result in true or false."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaddbc7d8ded93c207f4ffd",
    "id": "ac371524-c9a3-4378-8129-0378e165fc28",
    "group": "JsByVersion",
    "name": "isArray",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let arr=[3,4,5];",
      "arr.forEach((ele)=>console.log(ele)); // prints all elements in the array"
    ],
    "outputs": [
      "executes the function for every element found in the array."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaddc82d8ded93c207f4ffe",
    "id": "a081958b-294c-4e27-a575-4656a1b0eb3d",
    "group": "JsByVersion",
    "name": "forEach",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let arr=[5,7,9];",
      "let newArr= arr.map(ele=>ele *ele);",
      "console.log(newArr);"
    ],
    "outputs": [
      "creates a new array by mapping every element of the array (on which the map is used)."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaddd0bd8ded93c207f4fff",
    "id": "0b2fb623-7ba8-4aa3-8b80-3dc1e5b7a891",
    "group": "JsByVersion",
    "name": "map",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let arr=[1,2,3,4,5,6,7,8,9,10];",
      "const result= arr.filter(item=>item >5);",
      "console.log(result); //output: [6,7,8,9,10];"
    ],
    "outputs": [
      "creates a new array that contains elements which got filtered by making array elements pass some condition."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaddddad8ded93c207f5000",
    "id": "65939e8c-b7ef-4748-a7cf-348714084888",
    "group": "JsByVersion",
    "name": "filter",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr=[1,2,3,4,5,6,7,8,9,10];",
      "const result=arr.reduce((total,curVal)=>total-curVal);",
      "console.log(result); //returns -53"
    ],
    "outputs": [
      "applies a function to each element in an array and reduces the array to a single element."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaddf30d8ded93c207f5001",
    "id": "084675a3-dc5f-4ffa-8d7b-c3ce008f033f",
    "group": "JsByVersion",
    "name": "reduce",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr=[1,2,3,4,5,6,7,8,9,10];",
      "const result=arr.reduceRight((total,curVal)=>total-curVal);",
      "console.log(result); //returns -35"
    ],
    "outputs": [
      "It is quite same to reduce method, except for the traversal that happens from right to left."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eadf780d8ded93c207f5002",
    "id": "099441c2-4714-4371-a234-e1389b86e4f8",
    "group": "JsByVersion",
    "name": "reduceRight",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr=[5,10,15,30];",
      "const result=arr.every((val)=>val > 4);",
      "console.log(result); //returns: true",
      "const result=arr.every((val)=>val > 5);",
      "console.log(result); //returns: false"
    ],
    "outputs": [
      "This method checks a condition with every element of an array and if every element satisfies then returns true ",
      "if at least one element doesn’t satisfy the condition then returns false."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eadf8c3d8ded93c207f5003",
    "id": "20dd304b-5c0e-4c41-b1e9-85bd9c32dd9f",
    "group": "JsByVersion",
    "name": "every",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr=[5,10,15,30];",
      " const result=arr.some((val)=>val > 7); ",
      "console.log(result); //returns: true"
    ],
    "outputs": [
      "checks for at least one element that gets satisfied with the condition and if found returns true and if none satisfies then false."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eadf9a0d8ded93c207f5004",
    "id": "4ce94e35-d87a-4047-903b-89ecfd45026e",
    "group": "JsByVersion",
    "name": "some",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr=[5,10,15,30,15,20,15,3,4];",
      "console.log(arr.indexOf(15)); //returns: 2"
    ],
    "outputs": [
      "Returns the index of the first match in an array. If not found then returns -1."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eadfa33d8ded93c207f5005",
    "id": "f074847f-ed53-4c3e-8ff7-c046b2d9d1b0",
    "group": "JsByVersion",
    "name": "indexOf",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr=[5,10,15,30,15,20,15,3,4];",
      "console.log(arr.lastIndexOf(15)); //returns: 6"
    ],
    "outputs": [
      "Same as indexOf but checks and returns from the other end of an array."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eadfad5d8ded93c207f5006",
    "id": "464115cc-5a30-4761-b9f8-b13d6fee5362",
    "group": "JsByVersion",
    "name": "lastIndexOf",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let jsonStr = '{\"a\":1,\"b\":2}';",
      "let obj = JSON.parse(jsonStr);",
      "console.log(obj.a); //returns : 1"
    ],
    "outputs": [
      "parses a JSON string that is like an object."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eae260dd8ded93c207f5007",
    "id": "bcbaf876-ef3d-44f5-8af9-6a7614fc92c5",
    "group": "JsByVersion",
    "name": "JSON.parse",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "console.log(JSON.stringify({a:1,b:2}));"
    ],
    "outputs": [
      "converts an object to a JSON string."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaee32fd8ded93c207f5008",
    "id": "8d6027d6-58c4-4555-b839-e58052190e97",
    "group": "JsByVersion",
    "name": "JSON.stringify",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "console.log(Date.now());"
    ],
    "outputs": [
      "returns the number of milliseconds elapsed since 01-Jan-1970 UTC."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaeff08d8ded93c207f5009",
    "id": "7e89cedd-de8f-4a5d-a468-c8b935ade952",
    "group": "JsByVersion",
    "name": "Date.now",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var date = new Date();",
      "console.log(date.valueOf());"
    ],
    "outputs": [
      "returns the primitive value of a date object."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaeff99d8ded93c207f500a",
    "id": "2ea9b78b-f6d8-429b-acaa-3d13e12b59ec",
    "group": "JsByVersion",
    "name": "Date.valueOf",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let obj = {   get propName() {     // getter, the code executed on getting obj.propName   },",
      "set propName(value) {     // setter, the code executed on setting obj.propName = value   } };"
    ],
    "outputs": [
      "Getters and setters allow you to define Object Accessors (Computed Properties)."
    ],
    "indicator": 2009,
    "accepted": true,
    "_id": "5eaf013dd8ded93c207f500b",
    "id": "d124de1f-95e7-4e59-b4fc-a3788801eb17",
    "group": "JsByVersion",
    "name": "getters and setters",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "provide Block Scope variables. "
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf2cd8d8ded93c207f500c",
    "id": "f3193651-154d-4368-b2b9-be1f9e4364d6",
    "group": "JsByVersion",
    "name": "let & const",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr = ['one','tow','three'];",
      "for(const a of arr) {console.log(a);}"
    ],
    "outputs": [
      "an alternative for both for...in and forEach() and loops iterable data structures like Arrays, Maps, Sets, and strings."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf2d99d8ded93c207f500d",
    "id": "1670f894-bcaf-4593-a366-5c89a86210e2",
    "group": "JsByVersion",
    "name": "for...of",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "function fun(a,b,c=0) {console.log('a: '+a+' b: '+b+' c: '+c);};",
      "fun(2,3);"
    ],
    "outputs": [
      "Provides default values to function parameters if no value or undefined is passed."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf2f0bd8ded93c207f500e",
    "id": "62b8d392-96fe-4aec-85da-c2844d136ea8",
    "group": "JsByVersion",
    "name": "default parameters",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "function fun(...a){ console.log('a: '+a);}",
      "fun(1,2,3,4,5); //  \"a: 1,2,3,4,5\""
    ],
    "outputs": [
      "used to handle function parameters."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf309dd8ded93c207f500f",
    "id": "91437634-ce92-4105-b63e-1c3f68583524",
    "group": "JsByVersion",
    "name": "rest operator",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let arr1=[1,2,3];",
      "let arr2=[4,5];",
      "let newArr = [...arr1,...arr2];",
      "console.log(newArr); //[1,2,3,4,5]"
    ],
    "outputs": [
      "Spread Operator is used with arrays and its syntax is exactly the same as that of Rest Operator (ie …). It is used to split the contents of an array."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf31a2d8ded93c207f5010",
    "id": "63c91310-6b3e-4763-a75c-6789fe7c3803",
    "group": "JsByVersion",
    "name": "spread operator",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const arr = [1,2];",
      "const [x,y] = arr;",
      "console.log('x: '+ x +' y: ' +y); //x:1 y:2",
      "const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}; //destructuring from object",
      "console.log(a); // 10",
      "console.log(b); // 20",
      "console.log(rest); // {c: 30, d: 40}"
    ],
    "outputs": [
      "unpacking values from an array or an object."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf340bd8ded93c207f5011",
    "id": "3f73fb1f-ce0a-4aa7-b687-0468a6621ce5",
    "group": "JsByVersion",
    "name": "destructuring",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let a=1; let b=2; let c=3;",
      "console.log(`a: ${a} b: ${b} c: ${c}`); // \"a: 1 b: 2 c: 3\""
    ],
    "outputs": [
      "embedded expressions, which makes print statements easy."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf449dd8ded93c207f5012",
    "id": "30a6cf3f-f092-45f9-8ef2-e80ca11f8bdf",
    "group": "JsByVersion",
    "name": "template literals/strings",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const val = (x,y) => x * y;",
      "console.log(val(2,3));  // 6",
      "function f() {   let showArg = () => alert(arguments[0]);   showArg(); }  f(1); // 1"
    ],
    "outputs": [
      "If Arrow functions do not have \"arguments\" and we access the arguments object from an arrow function, it takes them from the outer “normal” function."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf4548d8ded93c207f5013",
    "id": "2b64b101-8b5e-40fb-8a12-f0c226075e2e",
    "group": "JsByVersion",
    "name": "arrow functions",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let myPromise = new Promise((resolve,reject)=>{....})"
    ],
    "outputs": [
      "handle Asynchronous Programming in a more elegant way. Before Promises, async calls were handled by Callbacks."
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eaf481cd8ded93c207f5014",
    "id": "70955f29-7401-435f-aded-6e618fc7a02e",
    "group": "JsByVersion",
    "name": "promises",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "class Demo{",
      "constructor(message) { this.message = message;}",
      "showMessage(){ console.log(this.message);}",
      "}",
      "let demo = new Demo(\"hello world\");",
      "demo.showMessage();"
    ],
    "outputs": [
      "ES6 the keyword class is introduced that makes the approach very easy. (still not working well in IE)"
    ],
    "indicator": 2015,
    "accepted": true,
    "_id": "5eb1d9b5d8ded93c207f5015",
    "id": "d79cd57f-107a-481a-8b34-3831ab9dbc7d",
    "group": "JsByVersion",
    "name": "classes",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "console.log(2**3);"
    ],
    "outputs": [
      "exponentiation operator"
    ],
    "indicator": 2016,
    "accepted": true,
    "_id": "5eb1dc44d8ded93c207f5016",
    "id": "35781d0b-8b50-4017-848c-0e26875d5ae6",
    "group": "JsByVersion",
    "name": "exponentiation operator (**)",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let animal = ['cat','rat','bat']; console.log(animal.includes('cat'));",
      "console.log(animal.includes('cat')); //return: true"
    ],
    "outputs": [
      "Returns true if an array includes a value, if not returns false."
    ],
    "indicator": 2016,
    "accepted": true,
    "_id": "5eb1dd1ed8ded93c207f5017",
    "id": "efb83afa-1757-4ae9-9176-ff50f2f0bdb9",
    "group": "JsByVersion",
    "name": "includes",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let str = 'ABCDE';",
      "console.log(str.padStart(6,'*')); //output : *ABCDE"
    ],
    "outputs": [
      "pads a string with another string at the beginning."
    ],
    "indicator": 2016,
    "accepted": true,
    "_id": "5eb1e10dd8ded93c207f5018",
    "id": "eeeed662-4f99-4c00-9033-e998db121c7e",
    "group": "JsByVersion",
    "name": "padStart",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "let str = 'ABCDE'; ",
      "console.log(str.padEnd(7,'*'));"
    ],
    "outputs": [
      "pads a string with another string and makes the resulting string reach a given length."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb1e1b0d8ded93c207f5019",
    "id": "a8f53eb9-80da-4d1c-8a07-0fc6598e01a7",
    "group": "JsByVersion",
    "name": "padEnd",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "async function f1(y) {",
      "var x = await new Promise(resolve =>setTimeout(() =>resolve(y*2), 2000));",
      "console.log(x);",
      "}",
      "f1(10);"
    ],
    "outputs": [
      "applied only inside an async function, waits to be rejected or resolved by a promise."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb22705d8ded93c207f501a",
    "id": "67ca71b7-0415-408e-b9da-dc5c26befc1f",
    "group": "JsByVersion",
    "name": "async/await",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const colors =['red','yellow','green'];",
      "console.log(Object.entries(colors)); //returns: [[\"0\", \"red\"], [\"1\", \"yellow\"], [\"2\", \"green\"]]"
    ],
    "outputs": [
      "returns an array that contains the key-value pairs of a given object as an array."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb22808d8ded93c207f501b",
    "id": "b57ba400-392a-4da2-add4-c213a0772691",
    "group": "JsByVersion",
    "name": "Object.entries",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "[1,2,3, , , ,] or {\"a\": 1,\"b\":2,} or function func(p,){}"
    ],
    "outputs": [
      " a comma that comes at the end of the last item in a list. It could be used in array, object and functions but not allowed in JSON"
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb22bf1d8ded93c207f501c",
    "id": "d80eb078-9442-4084-bd18-d0a3fe81e95e",
    "group": "JsByVersion",
    "name": "Trailing commas",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "https://2ality.com/2017/01/shared-array-buffer.html"
    ],
    "outputs": [
      "The same data can be read and written on multiple threads using the SharedArrayBuffer constructor. Interruption during the process of reading or writing can be avoided by using Atomic objects. This allows the previous operation to finish prior to the next one."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb2bc46d8ded93c207f501d",
    "id": "f2f6116c-2f23-4ac6-9857-297f251da78f",
    "group": "JsByVersion",
    "name": "Shared memory and atomics",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const person = {name:'ray'}; ",
      "let desc = Object.getOwnPropertyDescriptor(person,'name'); ",
      "console.log(desc); // {   configurable: true,   enumerable: true,   value: \"ray\",   writable: true }"
    ],
    "outputs": [
      "An object is returned to the own property descriptors with get, set, writeable, configurable and enumerable attributes."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb2c3b9d8ded93c207f501e",
    "id": "f454a11f-3504-4e8d-aebb-7520b8e276cc",
    "group": "JsByVersion",
    "name": "Object.getOwnPropertyDescriptor",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const colors = {BL:'blue',OR:'Orange',YE:'yellow',PI:'Pink'};  ",
      "console.log(Object.values(colors)); //[\"blue\", \"Orange\", \"yellow\", \"Pink\"]"
    ],
    "outputs": [
      "It returns an array of a given object’s own enumerable property values."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5eb2c4d3d8ded93c207f501f",
    "id": "6d68e45c-3f99-4673-a02e-26d04c5b9c03",
    "group": "JsByVersion",
    "name": "Object.values",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "for await(const line of readLines(filePath)) {   console.log(line); }"
    ],
    "outputs": [
      "An async iterable object can be used as a loop iteration with the help of for-await-of."
    ],
    "indicator": 2018,
    "accepted": true,
    "_id": "5eb2c85fd8ded93c207f5020",
    "id": "2798d5c4-7ac4-4219-8351-d61d676bba64",
    "group": "JsByVersion",
    "name": "for-await-of",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const reDate = /([0-9]{4})-([0-9]{2})-([0-9]{2})/; ",
      "match = reDate.exec('2020-05-06'); ",
      "console.log(match[1]); //2020"
    ],
    "outputs": [
      "A matched object can be returned by using regular expressions of JavaScript. A matched object has array-like value with matched strings."
    ],
    "indicator": 2018,
    "accepted": true,
    "_id": "5eb2cb02d8ded93c207f5021",
    "id": "0cd20637-0e89-405c-9497-8ea994bada23",
    "group": "JsByVersion",
    "name": "New Regex Capabilities",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "restParam(1,2,3,4,5,6);",
      "function restParam(p1,p2,...p3) {   ",
      "console.log(p1);  // returns: 1",
      "console.log(p3); //returns: [3,4,5,6]",
      "}"
    ],
    "outputs": [
      "The last arguments sent to a function are changed to an array using Rest parameters and the (...) notation can be used only for array operations."
    ],
    "indicator": 2018,
    "accepted": true,
    "_id": "5eb2cca1d8ded93c207f5022",
    "id": "0aba4f33-16ce-4e1d-a40c-c813531bccf2",
    "group": "JsByVersion",
    "name": "rest/spread properties",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ".then(function(json){...}).catch(function(error){...}).finally(function(){...}"
    ],
    "outputs": [
      "The method then() is called after successfully resolving the promise and catch() method is declared if a problem occurs. ",
      "Eventually, the code can be executed using finally() method irrespective of previous occurrences."
    ],
    "indicator": 2018,
    "accepted": true,
    "_id": "5eb2ce09d8ded93c207f5023",
    "id": "47c571d4-68dd-4467-af78-ea50616d7da4",
    "group": "JsByVersion",
    "name": "promise finally",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const colors = {BL:'blue',OR:'Orange',YE:'yellow',PI:'Pink'}; ",
      "console.log(Object.keys(colors));"
    ],
    "outputs": [
      "returns an array of object keys."
    ],
    "indicator": 2017,
    "accepted": true,
    "_id": "5ebea58865314c355c717f6b",
    "id": "6e668b39-3ca2-474d-ba31-a0ce7bcd719d",
    "group": "JsByVersion",
    "name": "Object.keys",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var subject = new Rx.Subject();   ",
      "subject.subscribe(v => console.log('observerA: ' + v) ); ",
      "subject.next(1);  //observerA: 1"
    ],
    "outputs": [
      "Sends only upcoming values; A Subject doesn't hold a value;"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec15f3265314c355c717f6c",
    "id": "103d7d87-c783-43f6-a811-5f8226e0f5b2",
    "group": "Subjects",
    "name": "Subject",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var subject = new Rx.BehaviorSubject(0);  ",
      " subject.subscribe(v => console.log('observerA: ' + v));  //observerA: 0",
      " subject.next(1); //observerA: 1"
    ],
    "outputs": [
      "Sends one previous value and upcoming values; A BehaviorSubject holds one value. ",
      "When it is subscribed it emits the value immediately; BehaviorSubject can be created with initial value: new Rx.BehaviorSubject(1) You can get current value synchronously by subject.value; ",
      "BehaviorSubject is the best for 90% of the cases to store current value comparing to other Subject types;"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec15f5c65314c355c717f6d",
    "id": "c58ccacb-5a78-48b0-9ecb-9e6f1a2ea46a",
    "group": "Subjects",
    "name": "BehaviorSubject",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var subject = new Rx.ReplaySubject(2);    ",
      "subject.next(1); ",
      "subject.next(2); ",
      "subject.next(3); ",
      "subject.next(4);   ",
      "subject.subscribe(v => console.log('observerB: ' + v));   ",
      "subject.next(5); //observerB: 3 //observerB: 4 //observerB: 5"
    ],
    "outputs": [
      "Sends all previous values and upcoming values"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec15f8765314c355c717f6e",
    "id": "e8240386-f9c0-4bb2-9ba5-1c16af2368e2",
    "group": "Subjects",
    "name": "ReplaySubject",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var subject = new Rx.AsyncSubject();",
      "subject.next(1);  ",
      "subject.next(5);   ",
      "subject.subscribe(v => console.log('observerB: ' + v));   ",
      "subject.complete();    //observerB: 5"
    ],
    "outputs": [
      "Sends one latest value when the stream will close"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec15fc465314c355c717f6f",
    "id": "640dc461-6c99-495b-813c-4c29c4b73017",
    "group": "Subjects",
    "name": "AsyncSubject",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex-direction: column;",
      "row(Default),row-reverse,column,column-reverse,initial,inherit"
    ],
    "outputs": [
      "The flex-direction property defines in which direction the container wants to stack the flex items."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec48f8f138eb83d90b74b99",
    "id": "d2bc43b3-1125-4d73-a36d-3f6fa8db9150",
    "group": "Flexbox",
    "name": "flex-direction",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex-wrap: wrap;",
      "nowrap(Default),wrap,wrap-reverse,initial,inherit"
    ],
    "outputs": [
      "The flex-wrap property specifies whether the flex items should wrap or not."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec48fcb138eb83d90b74b9a",
    "id": "fa067ef6-3631-4e45-b231-f66dd0826a88",
    "group": "Flexbox",
    "name": "flex-wrap",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex-flow: row wrap;"
    ],
    "outputs": [
      "The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec49002138eb83d90b74b9b",
    "id": "912f6a1c-7490-46e9-9f2e-ed72a8546ca7",
    "group": "Flexbox",
    "name": "flex-flow",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "justify-content: center;",
      "flex-start(Default),flex-end,center,space-between,space-around,space-evenly,initial,inherit"
    ],
    "outputs": [
      "The justify-content property is used to align the flex items:"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec4903a138eb83d90b74b9c",
    "id": "b1f7b390-9f0f-4b12-a775-779632794d2a",
    "group": "Flexbox",
    "name": "justify-content",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "align-items: center;",
      "stretch(Default),center,flex-start,flex-end,baseline,initial,inherit"
    ],
    "outputs": [
      "The align-items property is used to align the flex items vertically.",
      "align-items will determine how all the flex items display whereas align-self is for overriding this on individual items."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec49074138eb83d90b74b9d",
    "id": "1cb3f211-0c36-4b8e-ac05-a03d3ca5bc52",
    "group": "Flexbox",
    "name": "align-items",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "align-content: space-between;",
      "stretch(Default),center,flex-start,flex-end,space-between,space-around,space-evenly,initial,inherit"
    ],
    "outputs": [
      "The align-content property is used to align the flex lines."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec490c3138eb83d90b74b9e",
    "id": "bfc944ac-2138-4801-acfe-a0861aaf5999",
    "group": "Flexbox",
    "name": "align-content",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "order: 3",
      "number(Default is 0), initial, inherit"
    ],
    "outputs": [
      "The order property specifies the order of the flex items."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec4919a138eb83d90b74b9f",
    "id": "3574b543-8433-499f-819a-f01070788f4f",
    "group": "FlexItem",
    "name": "order",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex-grow: 1",
      "number(Default value is 0), initial, inherit"
    ],
    "outputs": [
      "The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec491cf138eb83d90b74ba0",
    "id": "743ea86b-f8af-4944-8d56-b3edcd24bc53",
    "group": "FlexItem",
    "name": "flex-grow",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex-shrink: 0;",
      "number(Default is 1), initial, inherit"
    ],
    "outputs": [
      "The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items.",
      "An element with a flex-shrink value of 0 will not shrink as our page gets smaller. This is only true if there is no flex-grow value on this element. ",
      "If there is a flex-grow value, the element won’t shrink smaller than it’s content"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec49211138eb83d90b74ba1",
    "id": "3dcf4d15-7c8c-4532-ab81-0ca333a7236c",
    "group": "FlexItem",
    "name": "flex-shrink",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex-basis: 200px;",
      "auto(Default), initial, inherit, number"
    ],
    "outputs": [
      "The flex-basis property specifies the initial length of a flex item."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec4923b138eb83d90b74ba2",
    "id": "d47b5927-37f6-4710-95ff-792716b2889f",
    "group": "FlexItem",
    "name": "flex-basis",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "flex: 0 0 200px"
    ],
    "outputs": [
      "The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.",
      "flex: 1 0 200px;  /* element will be minimum 200px and allowed to grow but not able to shrink */",
      "flex: 1;  /*Let all the flexible items be the same length, regardless of its content: */",
      "flex: 0 1 200px;  /* element will be maximum 200px and allowed to shrink but not able to grow */"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec4926e138eb83d90b74ba3",
    "id": "ff79fb2e-0218-45ee-abd8-7380c7537eb8",
    "group": "FlexItem",
    "name": "flex",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "align-self: center",
      "auto(Default),stretch,center,flex-start,flex-end,baseline,initial,inherit"
    ],
    "outputs": [
      "The align-self property specifies the alignment for the selected item inside the flexible container.",
      "align-items will determine how all the flex items display whereas align-self is for overriding this on individual items."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec49298138eb83d90b74ba4",
    "id": "41869c7c-d5fd-4a7a-a90a-a6a9561483ac",
    "group": "FlexItem",
    "name": "align-self",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p::first-line {   color: #ff0000;   font-variant: small-caps; }"
    ],
    "outputs": [
      "The ::first-line pseudo-element is used to add a special style to the first line of a text."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d533b9b4ad11101de3d4",
    "id": "342fae5f-5a8a-4769-a2e2-9ba6f7a114f7",
    "group": "Pseudo-elements",
    "name": "first-line",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p::first-letter {   color: #ff0000;   font-size: xx-large; }"
    ],
    "outputs": [
      "The ::first-letter pseudo-element is used to add a special style to the first letter of a text."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d55cb9b4ad11101de3d5",
    "id": "0c8234c1-657d-4e2f-97ee-f73437632fb2",
    "group": "Pseudo-elements",
    "name": "first-letter",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "h1::before {   content: url(smiley.gif); }"
    ],
    "outputs": [
      "The ::before pseudo-element can be used to insert some content before the content of an element."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d5f7b9b4ad11101de3d6",
    "id": "4f2fc1d7-31d7-4b4e-b630-fc49c53b1ee5",
    "group": "Pseudo-elements",
    "name": "before",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "h1::after {   content: url(smiley.gif); }"
    ],
    "outputs": [
      "The ::after pseudo-element can be used to insert some content after the content of an element."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d613b9b4ad11101de3d7",
    "id": "263c150e-d8a1-4df1-ab18-63e6d836e21b",
    "group": "Pseudo-elements",
    "name": "after",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "::selection {   color: red;   background: yellow; }"
    ],
    "outputs": [
      "The ::selection pseudo-element matches the portion of an element that is selected by a user."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d653b9b4ad11101de3d8",
    "id": "587b2054-b632-47ef-812e-bffeed11ea73",
    "group": "Pseudo-elements",
    "name": "selection",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "a:active"
    ],
    "outputs": [
      "a:active\tSelects the active link"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d6dfb9b4ad11101de3d9",
    "id": "37ef0823-09dd-411e-be8a-549b43a130d6",
    "group": "Pseudo Classes",
    "name": "active",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:checked {   height: 50px;   width: 50px; }"
    ],
    "outputs": [
      "The :checked selector matches every checked <input> element (only for radio buttons and checkboxes) and <option> element."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d75cb9b4ad11101de3da",
    "id": "e8a13a8d-96ac-4130-8d72-08e9b2d82386",
    "group": "Pseudo Classes",
    "name": "checked",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:disabled {   background: #dddddd; }"
    ],
    "outputs": [
      "The :disabled selector matches every disabled element (mostly used on form elements)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d772b9b4ad11101de3db",
    "id": "c1ecf34a-f8a6-43fe-ba33-990e0f206a4f",
    "group": "Pseudo Classes",
    "name": "disabled",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:empty {   background: #ff0000; }"
    ],
    "outputs": [
      "The :empty selector matches every element that has no children (including text nodes)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d78eb9b4ad11101de3dc",
    "id": "4565bede-bde9-4553-b423-b705bb79f238",
    "group": "Pseudo Classes",
    "name": "empty",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:enabled {   background: #ffff00; }"
    ],
    "outputs": [
      "The :enabled selector matches every enabled element (mostly used on form elements)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d7a7b9b4ad11101de3dd",
    "id": "1c721fc9-1c7f-46f1-ab06-24cd132fb4c9",
    "group": "Pseudo Classes",
    "name": "enabled",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:first-child {   background-color: yellow; }"
    ],
    "outputs": [
      "The :first-child selector is used to select the specified selector, only if it is the first child of its parent."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d7d3b9b4ad11101de3de",
    "id": "dacbdb14-0eb5-4076-a34d-7d7431f1983e",
    "group": "Pseudo Classes",
    "name": "first-child",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:first-of-type {   background: red; }"
    ],
    "outputs": [
      "The :first-of-type selector matches every element that is the first child, of a particular type, of its parent."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d7ecb9b4ad11101de3df",
    "id": "8b9ab817-499d-4739-9a40-a8ce02fa118c",
    "group": "Pseudo Classes",
    "name": "first-of-type",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:focus {   background-color: yellow; }"
    ],
    "outputs": [
      "The :focus selector is used to select the element that has focus.",
      "The :focus selector is allowed on elements that accept keyboard events or other user inputs."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d804b9b4ad11101de3e0",
    "id": "be8ad75f-17a7-4792-a9de-6a445d8c0182",
    "group": "Pseudo Classes",
    "name": "focus",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "a:hover {   background-color: yellow; }"
    ],
    "outputs": [
      "The :hover selector is used to select elements when you mouse over them.",
      "The :hover selector can be used on all elements, not only on links."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d81ab9b4ad11101de3e1",
    "id": "ea5d3cda-a514-4285-b22a-0ecec48cdc42",
    "group": "Pseudo Classes",
    "name": "hover",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:in-range {   border: 2px solid yellow; }"
    ],
    "outputs": [
      "The :in-range selector selects all elements with a value that is within a specified range.",
      "The :in-range selector only works for input elements with min and/or max attributes!",
      "Use the :out-of-range selector to select all elements with a value that is outside a specified range."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d838b9b4ad11101de3e2",
    "id": "73a65ce9-26c1-43ad-a006-e52bf1cb182e",
    "group": "Pseudo Classes",
    "name": "in-range",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:invalid {   border: 2px solid red; }"
    ],
    "outputs": [
      "The :invalid selector selects form elements with a value that does not validate according to the element's settings."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d851b9b4ad11101de3e3",
    "id": "d8182dcd-81a4-4d8d-ac8e-25ddfa37ca12",
    "group": "Pseudo Classes",
    "name": "invalid",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:lang(it) {   background: yellow; }"
    ],
    "outputs": [
      "The :lang() selector is used to select elements with a lang attribute with the specified value.",
      "The lang attribute value is most often a two-letter language code, like lang=\"fr\" (for French), or two language codes combined, like lang=\"fr-ca\" (for Canadian French)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d881b9b4ad11101de3e4",
    "id": "1d96dce2-a0ee-4790-a551-664dc8ad05d1",
    "group": "Pseudo Classes",
    "name": "lang()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "  p:last-child {   background: #ff0000; }"
    ],
    "outputs": [
      "The :last-child selector matches every element that is the last child of its parent.",
      "p:last-child is equal to p:nth-last-child(1)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d89bb9b4ad11101de3e5",
    "id": "959535bc-1ffc-442d-b7dc-d2fc9bd3a6f7",
    "group": "Pseudo Classes",
    "name": "last-child",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:last-of-type {   background: #ff0000; }"
    ],
    "outputs": [
      "The :last-of-type selector matches every element that is the last child, of a particular type, of its parent.",
      "This is the same as :nth-last-of-type(1)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d8b8b9b4ad11101de3e6",
    "id": "5a54d782-deef-41db-9b4c-4eac6bf807c5",
    "group": "Pseudo Classes",
    "name": "last-of-type",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "a:link {   background-color: yellow; }"
    ],
    "outputs": [
      "The :link selector is used to select unvisited links.",
      "The :link selector does not style links you have already visited."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d8d0b9b4ad11101de3e7",
    "id": "851a6b46-3593-4a3e-bed4-b9cff6659423",
    "group": "Pseudo Classes",
    "name": "link",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ":not(p) {   background: #ff0000; }"
    ],
    "outputs": [
      "The :not(selector) selector matches every element that is NOT the specified element/selector."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d8f0b9b4ad11101de3e8",
    "id": "67ac8e40-d342-4456-a161-0367f89cbc57",
    "group": "Pseudo Classes",
    "name": "not()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:nth-child(2) {   background: red; }"
    ],
    "outputs": [
      "The :nth-child(n) selector matches every element that is the nth child, regardless of type, of its parent.",
      "n can be a number, a keyword, or a formula."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d912b9b4ad11101de3e9",
    "id": "2e8054df-7f78-4d6b-9206-6f0453170389",
    "group": "Pseudo Classes",
    "name": "nth-child()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:nth-last-child(2) {   background: red; }"
    ],
    "outputs": [
      "The :nth-last-child(n) selector matches every element that is the nth child, regardless of type, of its parent, counting from the last child."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d92db9b4ad11101de3ea",
    "id": "cef66f45-2f50-44bf-82b2-bbe47f773b6c",
    "group": "Pseudo Classes",
    "name": "nth-last-child()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:nth-last-of-type(2) {   background: red; }"
    ],
    "outputs": [
      "The :nth-last-of-type(n) selector matches every element that is the nth child, of a particular type, of its parent, counting from the last child."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d946b9b4ad11101de3eb",
    "id": "344bfdcf-0255-4fc4-9897-25e1028c5812",
    "group": "Pseudo Classes",
    "name": "nth-last-of-type()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:nth-of-type(2) {   background: red; }"
    ],
    "outputs": [
      "The :nth-of-type(n) selector matches every element that is the nth child, of a particular type, of its parent."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d961b9b4ad11101de3ec",
    "id": "19908b62-61dd-447b-a471-dfd1f5eaea90",
    "group": "Pseudo Classes",
    "name": "nth-of-type()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:only-of-type {   background: #ff0000; }"
    ],
    "outputs": [
      "The :only-of-type selector matches every element that is the only child of its type, of its parent."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d97db9b4ad11101de3ed",
    "id": "a40aed88-c5f1-4b29-ac13-4eb072f470b3",
    "group": "Pseudo Classes",
    "name": "only-of-type",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "p:only-child {   background: #ff0000; }"
    ],
    "outputs": [
      "The :only-child selector matches every element that is the only child of its parent."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d99ab9b4ad11101de3ee",
    "id": "a3225814-8b66-4cd6-a910-7acb1ce96b04",
    "group": "Pseudo Classes",
    "name": "only-child",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:optional {   background-color: yellow; }"
    ],
    "outputs": [
      "The :optional selector selects form elements which are optional.  Form elements with no required attribute are defined as optional.",
      "The :optional selector only applies to the form elements: input, select and textarea."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d9b6b9b4ad11101de3ef",
    "id": "6e835e6e-0e2f-416e-b9b8-e1e832456e8e",
    "group": "Pseudo Classes",
    "name": "optional",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:out-of-range {   border: 2px solid red; }"
    ],
    "outputs": [
      "The :out-of-range selector selects all elements with a value that is outside a specified range.",
      "The :out-of-range selector only works for input elements with min and/or max attributes!"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d9ceb9b4ad11101de3f0",
    "id": "55fe1f0a-2226-43bc-8fbd-47c61ffed744",
    "group": "Pseudo Classes",
    "name": "out-of-range",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:read-only {   background-color: yellow; }"
    ],
    "outputs": [
      "The :read-only selector selects elements which are \"readonly\"."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6d9e7b9b4ad11101de3f1",
    "id": "de82911b-ab29-4d0a-aa51-0138aa6f0b00",
    "group": "Pseudo Classes",
    "name": "read-only",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:read-write {   background-color: yellow; }"
    ],
    "outputs": [
      "The :read-write selector selects form elements which are \"readable\" and \"writeable\".",
      "Form elements with no \"readonly\" attribute, and no \"disabled\" attribute are defined as \"read-\" and \"write-able\"."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6da05b9b4ad11101de3f2",
    "id": "3174105a-740e-488c-a10b-210a289e26d4",
    "group": "Pseudo Classes",
    "name": "read-write",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:required {   background-color: yellow; }"
    ],
    "outputs": [
      "The :required selector selects form elements which are required.  Form elements with a required attribute are defined as required.",
      "The :required selector only applies to the form elements: input, select and textarea."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6da1cb9b4ad11101de3f3",
    "id": "91d45c62-d059-4da9-adc5-5a246b8f5083",
    "group": "Pseudo Classes",
    "name": "required",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ":root {   background: #ff0000; }"
    ],
    "outputs": [
      "Selects the document's root element //In HTML, the root element is always the html element."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6da4db9b4ad11101de3f4",
    "id": "a640d292-b197-4c56-853b-bc23d754e0b2",
    "group": "Pseudo Classes",
    "name": "root",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ":target {   border: 2px solid #D4D4D4;   background-color: #e5eecc; }"
    ],
    "outputs": [
      "The :target selector can be used to style the current active target element.",
      "#news:target\tSelects the current active #news element (clicked on a URL containing that anchor name)"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6daafb9b4ad11101de3f5",
    "id": "5cd38a61-cf1f-4939-9cdb-66095893a82d",
    "group": "Pseudo Classes",
    "name": "target",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "input:valid {   background-color: yellow; }"
    ],
    "outputs": [
      "The :valid selector selects form elements with a value that validates according to the element's settings.",
      "The :valid selector only works for form elements with limitations, such as input elements with min and max attributes, email fields with a legal email, or number fields with a numeric value, etc."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6dacbb9b4ad11101de3f6",
    "id": "500d54ce-73fc-4e16-813f-84faa42d76da",
    "group": "Pseudo Classes",
    "name": "valid",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "a:visited {   color: pink; }"
    ],
    "outputs": [
      "The :visited selector is used to select visited links."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec6dadfb9b4ad11101de3f7",
    "id": "cc628c23-29b7-47b5-8bdb-91dc4d7ac6e5",
    "group": "Pseudo Classes",
    "name": "visited",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "Array.isArray(obj)"
    ],
    "outputs": [
      "The isArray() method determines whether an object is an array."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ec7d567b9b4ad11101de3f8",
    "id": "befacb12-bf00-478e-a735-165deb7a6cad",
    "group": "array",
    "name": "Array.isArray()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column1, column2, ... ",
      "FROM table_name;"
    ],
    "outputs": [
      "The SELECT statement is used to select data from a database."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed142eed698ad265847664c",
    "id": "ab21e214-9b2e-4d3c-be40-5e3e3d190876",
    "group": "SQL",
    "name": "SELECT",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT DISTINCT column1, column2, ... ",
      "FROM table_name;"
    ],
    "outputs": [
      "The SELECT DISTINCT statement is used to return only distinct (different) values."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14334d698ad265847664d",
    "id": "d224eb54-ca11-429d-bc44-f8af0ea6f0d8",
    "group": "SQL",
    "name": "SELECT DISTINCT",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column1, column2, ... ",
      "FROM table_name ",
      "ORDER BY column1, column2, ... ASC|DESC;"
    ],
    "outputs": [
      "The ORDER BY keyword is used to sort the result-set in ascending or descending order."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed143f2d698ad265847664e",
    "id": "c87452fe-b3d3-4568-bce5-f3f6f1b9ca04",
    "group": "SQL",
    "name": "ORDER BY",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);"
    ],
    "outputs": [
      "The INSERT INTO statement is used to insert new records in a table."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14423d698ad265847664f",
    "id": "0a4def72-899d-45c8-b74e-b310a780cd84",
    "group": "SQL",
    "name": "INSERT INTO",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_names FROM table_name WHERE column_name IS NULL;"
    ],
    "outputs": [
      "A field with a NULL value is a field with no value."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed1446ed698ad2658476650",
    "id": "d4374c44-baa8-45b1-af65-1ed3d019b70a",
    "group": "SQL",
    "name": "IS NULL",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;"
    ],
    "outputs": [
      "The UPDATE statement is used to modify the existing records in a table."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14498d698ad2658476651",
    "id": "2aee1121-2bc7-4c2c-9f83-0275e71f67ee",
    "group": "SQL",
    "name": "UPDATE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "DELETE FROM table_name WHERE condition;"
    ],
    "outputs": [
      "The DELETE statement is used to delete existing records in a table."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed144bcd698ad2658476652",
    "id": "34396661-d223-49a8-b1ee-a59bf3815d64",
    "group": "SQL",
    "name": "DELETE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT TOP number|percent column_name(s) FROM table_name WHERE condition;"
    ],
    "outputs": [
      "The SELECT TOP clause is used to specify the number of records to return. (LIMIT number;  in MySQL) (ROWNUM <= number in Oracle)"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14582d698ad2658476653",
    "id": "7c19d80b-6661-4bd2-956a-60d67785379e",
    "group": "SQL",
    "name": "SELECT TOP",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT MIN(column_name) FROM table_name WHERE condition; ",
      "SELECT MAX(column_name) FROM table_name WHERE condition;"
    ],
    "outputs": [
      "returns the smallest/largest value of the selected column."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed145f9d698ad2658476654",
    "id": "2453276c-f9bc-4003-b0a8-2682d3c729bf",
    "group": "SQL",
    "name": "MIN(),MAX()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT COUNT(column_name) FROM table_name WHERE condition;",
      "SELECT AVG(column_name) FROM table_name WHERE condition;",
      "SELECT SUM(column_name) FROM table_name WHERE condition;"
    ],
    "outputs": [
      "The COUNT() function returns the number of rows that matches a specified criterion.",
      "The AVG() function returns the average value of a numeric column.",
      "The SUM() function returns the total sum of a numeric column."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14680d698ad2658476655",
    "id": "dd18408e-18a2-4712-abef-08fcc29e868b",
    "group": "SQL",
    "name": "COUNT(), AVG(),SUM()",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;"
    ],
    "outputs": [
      "The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.",
      "There are two wildcards often used in conjunction with the LIKE operator:",
      "% - The percent sign represents zero, one, or multiple characters",
      "_ - The underscore represents a single character",
      "'a%' - Finds any values that start with \"a\"; '%a'- Finds any values that end with \"a\"; '%or%' - Finds any values that have \"or\" in any position;",
      "'_r%'-Finds any values that have \"r\" in the second position;'a_%'-Finds any values that start with \"a\" and are at least 2 characters in length;'a%o'-Finds any values that start with \"a\" and ends with \"o\""
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14815d698ad2658476656",
    "id": "4c9f79bc-3040-4fbc-8969-9be5d8483fdc",
    "group": "SQL",
    "name": "LIKE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT * FROM Customers WHERE City LIKE '[bsp]%';"
    ],
    "outputs": [
      "A wildcard character is used to substitute one or more characters in a string.",
      "[]  Represents any single character within the brackets; h[oa]t finds hot and hat, but not hit",
      "^  Represents any character not in the brackets; h[^oa]t finds hit, but not hot and hat",
      "- Represents a range of characters;\tc[a-b]t finds cat and cbt"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14a15d698ad2658476657",
    "id": "02b7c9ba-1e0c-4c27-8a06-f0ba27dcc5a9",
    "group": "SQL",
    "name": "Wildcard",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);",
      "SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');"
    ],
    "outputs": [
      "The IN operator allows you to specify multiple values in a WHERE clause.",
      "The IN operator is a shorthand for multiple OR conditions."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14b77d698ad2658476658",
    "id": "a05e8d67-a373-4968-b3ba-89d8147acbe0",
    "group": "SQL",
    "name": "IN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;"
    ],
    "outputs": [
      "The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.",
      "The BETWEEN operator is inclusive: begin and end values are included. "
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14bb4d698ad2658476659",
    "id": "a767b185-6e9c-4d08-83c2-ce611cf1fdce",
    "group": "SQL",
    "name": "BETWEEN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name AS alias_name FROM table_name;",
      "SELECT column_name(s) FROM table_name AS alias_name;"
    ],
    "outputs": [
      "SQL aliases are used to give a table, or a column in a table, a temporary name.",
      "Aliases are often used to make column names more readable. An alias only exists for the duration of the query."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14c73d698ad265847665a",
    "id": "9817a0ad-757d-43a3-93cc-c42075e81be4",
    "group": "SQL",
    "name": "AS",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;"
    ],
    "outputs": [
      "The INNER JOIN keyword selects records that have matching values in both tables."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14cddd698ad265847665b",
    "id": "f55b459f-ea9d-424e-87c9-8be42fbfaba7",
    "group": "SQL",
    "name": "INNER JOIN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;"
    ],
    "outputs": [
      "The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14d0fd698ad265847665c",
    "id": "0d6d0e4c-8a86-4ff6-8889-a56b59180646",
    "group": "SQL",
    "name": "LEFT JOIN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;"
    ],
    "outputs": [
      "The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14d46d698ad265847665d",
    "id": "d0a0b19c-350b-4428-9739-0bd7e6e193cd",
    "group": "SQL",
    "name": "RIGHT JOIN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name WHERE condition;"
    ],
    "outputs": [
      "The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.",
      "FULL OUTER JOIN can potentially return very large result-sets! FULL OUTER JOIN and FULL JOIN are the same."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14df8d698ad265847665e",
    "id": "e45f0b5c-1d92-45cb-8d64-37c4e7163be4",
    "group": "SQL",
    "name": "FULL JOIN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;",
      "SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B ",
      "WHERE A.CustomerID <> B.CustomerID AND A.City = B.City ORDER BY A.City;"
    ],
    "outputs": [
      "A self JOIN is a regular join, but the table is joined with itself."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14e63d698ad265847665f",
    "id": "ddffff9e-bd31-4bbb-a91b-7be160434611",
    "group": "SQL",
    "name": "Self JOIN",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;"
    ],
    "outputs": [
      "The UNION operator is used to combine the result-set of two or more SELECT statements.",
      "The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14ec7d698ad2658476660",
    "id": "8caf6c8b-1c93-4733-b9a4-5c4eeda5976c",
    "group": "SQL",
    "name": "UNION",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s);",
      "SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC;"
    ],
    "outputs": [
      "The GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".",
      "The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14f6ad698ad2658476661",
    "id": "ab68a513-ef21-4e49-aac5-95a485685f45",
    "group": "SQL",
    "name": "GROUP BY",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) HAVING condition ORDER BY column_name(s);",
      "SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 5;"
    ],
    "outputs": [
      "The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed14fc1d698ad2658476662",
    "id": "4bd6f463-0e76-4e99-bd0e-a6260d277b30",
    "group": "SQL",
    "name": "HAVING",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);",
      "SELECT SupplierName FROM Suppliers WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);"
    ],
    "outputs": [
      "The EXISTS operator is used to test for the existence of any record in a subquery.  The EXISTS operator returns true if the subquery returns one or more records."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed1502ad698ad2658476663",
    "id": "f40d22ce-3526-4fc3-bd82-cc135e43c2d0",
    "group": "SQL",
    "name": "EXISTS",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT column_name(s) FROM table_name WHERE column_name operator ANY (SELECT column_name FROM table_name WHERE condition);",
      "SELECT column_name(s) FROM table_name WHERE column_name operator ALL (SELECT column_name FROM table_name WHERE condition);",
      "SELECT ProductName FROM Products WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);",
      "SELECT ProductName FROM Products WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);"
    ],
    "outputs": [
      "The ANY and ALL operators are used with a WHERE or HAVING clause.  The ANY operator returns true if any of the subquery values meet the condition.  The ALL operator returns true if all of the subquery values meet the condition."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16085d698ad2658476664",
    "id": "7ff81de2-88db-477c-9f7f-5fe06073f9f0",
    "group": "SQL",
    "name": "ANY and ALL",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT * INTO newtable [IN externaldb] FROM oldtable WHERE condition;",
      "SELECT column1, column2, column3, ... INTO newtable [IN externaldb] FROM oldtable WHERE condition;",
      "SELECT * INTO CustomersBackup2017 FROM Customers;",
      "SELECT * INTO CustomersBackup2017 IN 'Backup.mdb' FROM Customers;",
      "SELECT Customers.CustomerName, Orders.OrderID INTO CustomersOrderBackup2017 FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;"
    ],
    "outputs": [
      "The SELECT INTO statement copies data from one table into a new table.",
      "SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data",
      "SELECT * INTO newtable FROM oldtable WHERE 1 = 0;"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed1619cd698ad2658476665",
    "id": "6bf73017-894c-45fd-b90a-de049c8b229a",
    "group": "SQL",
    "name": "SELECT INTO",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "INSERT INTO table2 SELECT * FROM table1 WHERE condition;",
      "INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition;"
    ],
    "outputs": [
      "The INSERT INTO SELECT statement copies data from one table and inserts it into another table.  ",
      "INSERT INTO SELECT requires that data types in source and target tables match ",
      "The existing records in the target table are unaffected"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16220d698ad2658476666",
    "id": "440a749e-2508-4b0d-8c37-48dfb428ef56",
    "group": "SQL",
    "name": "INSERT INTO SELECT",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CASE     WHEN condition1 THEN result1     WHEN condition2 THEN result2     WHEN conditionN THEN resultN     ELSE result END;",
      "SELECT OrderID, Quantity, CASE     WHEN Quantity > 30 THEN 'The quantity is greater than 30'     WHEN Quantity = 30 THEN 'The quantity is 30'     ",
      "ELSE 'The quantity is under 30' END AS QuantityText FROM OrderDetails;"
    ],
    "outputs": [
      "The CASE statement goes through conditions and returns a value when the first condition is met (like an IF-THEN-ELSE statement).",
      "So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.",
      "If there is no ELSE part and no conditions are true, it returns NULL."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed162a0d698ad2658476667",
    "id": "07045b3e-509d-487e-961c-fba8909a5948",
    "group": "SQL",
    "name": "CASE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0)) FROM Products; //MySQL",
      "SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) FROM Products; //MySQL",
      "SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0)) FROM Products; //SQL",
      "SELECT ProductName, UnitPrice * (UnitsInStock + IIF(IsNull(UnitsOnOrder), 0, UnitsOnOrder)) FROM Products; //MS Access",
      "SELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0)) FROM Products; //Oracle"
    ],
    "outputs": [
      "MySQL: IFNULL(), COALESCE(), || SQL Server: ISNULL(),  || Oracle:  NVL() Functions",
      ""
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed163e2d698ad2658476668",
    "id": "7db5a413-de0e-4dbc-9a3a-ab6d99b055b0",
    "group": "SQL",
    "name": "NULL Functions",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CREATE PROCEDURE procedure_name AS sql_statement GO;",
      "EXEC procedure_name; //Execute a Stored Procedure",
      "CREATE PROCEDURE SelectAllCustomers AS SELECT * FROM Customers GO;",
      "EXEC SelectAllCustomers;"
    ],
    "outputs": [
      "A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.",
      "So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.",
      "You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed164a4d698ad2658476669",
    "id": "6a863029-6763-4ce4-bf8b-994f1382383d",
    "group": "SQL",
    "name": "Stored Procedures",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "--Select all:",
      "/*Select all the columns ",
      "of all the records in the Customers table:*/"
    ],
    "outputs": [
      "Single line comments start with --. Any text between -- and the end of the line will be ignored (will not be executed).",
      "Multi-line comments start with /* and end with */."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed165a2d698ad265847666a",
    "id": "38749392-217f-4352-8518-1757aa6d4664",
    "group": "SQL",
    "name": "Comments",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CREATE DATABASE databasename;"
    ],
    "outputs": [
      "The CREATE DATABASE statement is used to create a new SQL database."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed165dbd698ad265847666b",
    "id": "8557335c-338d-42f9-942d-faae70100fc6",
    "group": "SQL",
    "name": "CREATE DATABASE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "DROP DATABASE databasename;"
    ],
    "outputs": [
      "The DROP DATABASE statement is used to drop an existing SQL database."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed165fdd698ad265847666c",
    "id": "7639e758-e50d-4f3c-b620-17df6b0cf1ec",
    "group": "SQL",
    "name": "DROP DATABASE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "BACKUP DATABASE databasename TO DISK = 'filepath';",
      "BACKUP DATABASE databasename TO DISK = 'filepath' WITH DIFFERENTIAL; ",
      "//A differential back up only backs up the parts of the database that have changed since the last full database backup.",
      "BACKUP DATABASE testDB TO DISK = 'D:\\backups\\testDB.bak';"
    ],
    "outputs": [
      "The BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16663d698ad265847666d",
    "id": "3a470863-8c39-4162-8d46-2773b5945af2",
    "group": "SQL",
    "name": "BACKUP DATABASE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CREATE TABLE table_name (     column1 datatype,     column2 datatype,     column3 datatype,    .... );",
      "CREATE TABLE Persons (     PersonID int,     LastName varchar(255),     FirstName varchar(255),     Address varchar(255),     City varchar(255) );"
    ],
    "outputs": [
      "The CREATE TABLE statement is used to create a new table in a database."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed1669fd698ad265847666e",
    "id": "db5f4042-25c6-457f-bb30-10c983dbac02",
    "group": "SQL",
    "name": "CREATE TABLE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "DROP TABLE table_name;"
    ],
    "outputs": [
      "The DROP TABLE statement is used to drop an existing table in a database."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed166c7d698ad265847666f",
    "id": "f226b7c3-250f-478d-aef6-b4cd3d52e1b5",
    "group": "SQL",
    "name": "DROP TABLE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ALTER TABLE table_name ADD column_name datatype;",
      "ALTER TABLE Customers ADD Email varchar(255);",
      "ALTER TABLE table_name DROP COLUMN column_name;"
    ],
    "outputs": [
      "The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.  ",
      "The ALTER TABLE statement is also used to add and drop various constraints on an existing table."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed1670ed698ad2658476670",
    "id": "9c975111-b686-40f0-9044-d4b96e859853",
    "group": "SQL",
    "name": "ALTER TABLE",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CREATE TABLE table_name (     column1 datatype constraint,     column2 datatype constraint,     column3 datatype constraint,     .... );"
    ],
    "outputs": [
      "SQL constraints are used to specify rules for data in a table.",
      "Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.",
      "The following constraints are commonly used in SQL:",
      "NOT NULL,UNIQUE,PRIMARY KEY,FOREIGN KEY,CHECK ,DEFAULT,INDEX ",
      "CREATE TABLE Persons (     ID int NOT NULL,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (ID) );"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16816d698ad2658476671",
    "id": "e455488d-efba-499f-89ad-3371948a9b10",
    "group": "SQL",
    "name": "Constraints",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CREATE TABLE Persons (     Personid int NOT NULL AUTO_INCREMENT,     LastName varchar(255) NOT NULL,     FirstName varchar(255),     Age int,     PRIMARY KEY (Personid) );"
    ],
    "outputs": [
      "Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.",
      "Often this is the primary key field that we would like to be created automatically every time a new record is inserted."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16882d698ad2658476672",
    "id": "c7ebd374-f2ce-48d4-80ed-3e18190e1eea",
    "group": "SQL",
    "name": "AUTO INCREMENT",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "SELECT * FROM Orders WHERE OrderDate='2008-11-11'"
    ],
    "outputs": [
      "Date Data Types:",
      "MySQL:  DATE - format YYYY-MM-DD, DATETIME - format: YYYY-MM-DD HH:MI:SS, TIMESTAMP - format: YYYY-MM-DD HH:MI:SS, YEAR - format YYYY or YY",
      "SQL Server: DATE - format YYYY-MM-DD, DATETIME - format: YYYY-MM-DD HH:MI:SS, SMALLDATETIME - format: YYYY-MM-DD HH:MI:SS, TIMESTAMP - format: a unique number"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16923d698ad2658476673",
    "id": "fa198d1c-2e5f-48e8-a5a5-d15b3a1aa231",
    "group": "SQL",
    "name": "Dates",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;",
      "CREATE VIEW [Products Above Average Price] AS SELECT ProductName, Price FROM Products WHERE Price > (SELECT AVG(Price) FROM Products);",
      "CREATE OR REPLACE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;"
    ],
    "outputs": [
      "A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.",
      "You can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from one single table."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed16a05d698ad2658476674",
    "id": "d8c7bf96-f2d8-40af-9292-516761d99dbb",
    "group": "SQL",
    "name": "CREATE VIEW",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const employee = {         name: 'Rajendra'       };       const obsEmployee: Observable<any>  = of(employee);       obsEmployee.subscribe((data) => { console.log(data); });"
    ],
    "outputs": [
      "is used for converting the string/objects to Observables."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed66b526bc2940350ba040b",
    "id": "bb2add68-c45f-4cf3-8057-a650dd22a66c",
    "group": "Rxjs",
    "name": "of",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const array = [10, 20, 30]; const result = from(array);  result.subscribe(x => console.log(x));"
    ],
    "outputs": [
      "Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed66bd26bc2940350ba040c",
    "id": "825abbe7-54dd-4ef6-b607-c8602a60a1f2",
    "group": "Rxjs",
    "name": "from",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      " const data = of('Rajendra Taradale');     data     .pipe(map(x => x.toUpperCase()))     .subscribe((d) => { console.log(d); });"
    ],
    "outputs": [
      "used to manipulate the data from observable return values in observable fashion"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed66dff6bc2940350ba040d",
    "id": "ca406ad6-4951-49b8-9789-a917fd523bf8",
    "group": "Rxjs",
    "name": "map",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "getPosts(): Observable<any[]> {      return this.http.get<any[]>          ('https://jsonplaceholder.typicode.com/users').pipe(share());    } "
    ],
    "outputs": [
      "no matter how many times you subscribe, will return a single source URL."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed66ec06bc2940350ba040e",
    "id": "fd5c0c10-0b1d-4a79-94ca-195f41c6ffe8",
    "group": "Rxjs",
    "name": "share",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "this.personalForm.get('firstName').valueChanges.pipe(debounceTime(500)).subscribe(         value => {           console.log(value);         }       );"
    ],
    "outputs": [
      "emit out the value from the source Observable only after a specified time has passed. "
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed66f246bc2940350ba040f",
    "id": "e69cfec1-2c44-4766-aa9d-bd751d1cb395",
    "group": "Rxjs",
    "name": "debounceTime",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "this.personalForm.get('firstName').valueChanges.pipe(distinctUntilChanged()).subscribe(        value => {          console.log(value);        }      ); "
    ],
    "outputs": [
      "Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed66f7f6bc2940350ba0410",
    "id": "d4fdb7e2-6aab-4816-8a43-a44efe6f8d48",
    "group": "Rxjs",
    "name": "distinctUntilChanged",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "this.Request.unsubscribe();"
    ],
    "outputs": [
      "In Angular, we use this in NgOnDistroy() lifecycle hook to make sure all the subscriptions are closed and no more data is there to receive or perform any operation."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed670ad6bc2940350ba0411",
    "id": "a650c9cb-8c95-4a9f-bd7c-e83e9a67ff4c",
    "group": "Rxjs",
    "name": "unsubscribe",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const clicks = fromEvent(document, 'click'); const result = clicks.pipe(first(ev => ev.target.tagName === 'DIV')); result.subscribe(x => console.log(x));"
    ],
    "outputs": [
      "Emits only the first value (or the first value that meets some condition) emitted by the source Observable."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed671846bc2940350ba0412",
    "id": "ba281766-ed00-4f0f-ac41-72830a6ca998",
    "group": "Rxjs",
    "name": "first",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const eventSource= fromEvent(document, 'click');       ",
      "eventSource.pipe(takeWhile(()=> this.count < 3)).subscribe(()=>{              console.log('clicked ', this.count);              this.count++;       });"
    ],
    "outputs": [
      "Emits values emitted by the source Observable so long as each value satisfies the given predicate, and then completes as soon as this predicate is not satisfied."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed6721c6bc2940350ba0413",
    "id": "13199395-01b9-4d6d-a5ef-cdce21736dc1",
    "group": "Rxjs",
    "name": "takeWhile",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const eventSource= of(1, 2, 3, 4, 5);",
      "eventSource.pipe(takeLast(2)).subscribe((d)=>{              console.log('Get last Value ',d);                     });"
    ],
    "outputs": [
      "Emits only the last count values emitted by the source Observable."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed672606bc2940350ba0414",
    "id": "1133f67a-bbb7-4554-bd62-5844dfdf6e9a",
    "group": "Rxjs",
    "name": "takeLast",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const eventSource = fromEvent(document, 'click');",
      "eventSource.pipe(takeUntil(this.startClick)).subscribe(() => {              console.log('clicked ');       }); ",
      "stopClick() {       this.startClick.next();       this.startClick.complete();     }"
    ],
    "outputs": [
      "Emits the values emitted by the source Observable until a notifier Observable emits a value."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed672ad6bc2940350ba0415",
    "id": "2b14bbb8-7c44-453d-927c-1e29ba33f927",
    "group": "Rxjs",
    "name": "takeUntil",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const intervalCount = interval(1000); const takeFive = intervalCount.pipe(take(5)); takeFive.subscribe(x => console.log(x));"
    ],
    "outputs": [
      "Emits only the first count values emitted by the source Observable."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed672f46bc2940350ba0416",
    "id": "1eab6832-0efc-4f00-b8d1-a25c1d5c8a39",
    "group": "Rxjs",
    "name": "take",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var ele = document.querySelector(selector);"
    ],
    "outputs": [
      "returns the first element that matches one or more CSS selectors. If no match is found, it returns null."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7bde76bc2940350ba0417",
    "id": "6a6e397d-2199-4de6-a20d-553adbd3ae73",
    "group": "Dom",
    "name": "querySelector",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "eles = document.querySelectorAll(selector);"
    ],
    "outputs": [
      "returns all elements that match the specified CSS selector."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7be146bc2940350ba0418",
    "id": "7e970cef-b158-49dc-bdd0-048c93ca15b6",
    "group": "Dom",
    "name": "querySelectorAll",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "element.addEventListener(event, function, useCapture);",
      "useCapture is optional"
    ],
    "outputs": [
      "The addEventListener() method attaches an event handler to the specified element.",
      "The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.",
      "You can add many event handlers to one element.",
      "You can add many event handlers of the same type to one element, i.e two \"click\" events.",
      "You can add event listeners to any DOM object not only HTML elements. i.e the window object.",
      "The addEventListener() method makes it easier to control how the event reacts to bubbling.",
      "When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.",
      "You can easily remove an event listener by using the removeEventListener() method."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7bf836bc2940350ba0419",
    "id": "20162a7c-7c4a-4490-a517-d7275891160d",
    "group": "Dom",
    "name": "addEventListener",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "document.getElementById(\"myDIV\").addEventListener(\"mousemove\", myFunction); //Attach an event handler to <div>",
      "document.getElementById(\"myDIV\").removeEventListener(\"mousemove\", myFunction); //Remove the event handler from <div>"
    ],
    "outputs": [
      "The removeEventListener() method removes an event handler that has been attached with the addEventListener() method.",
      "Note: To remove event handlers, the function specified with the addEventListener() method must be an external function, like in the example above (myFunction).",
      "Anonymous functions, like \"element.removeEventListener(\"event\", function(){ myScript });\" will not work."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c04c6bc2940350ba041a",
    "id": "932c1686-2d36-47ee-ae43-77206a8b9369",
    "group": "Dom",
    "name": "removeEventListener",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "document.createElement(tagName);"
    ],
    "outputs": [
      "The createElement() method creates an Element Node with the specified name.",
      "Tip: After the element is created, use the element.appendChild() or element.insertBefore() method to insert it to the document."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c0bb6bc2940350ba041b",
    "id": "687ba64b-715e-4358-9c6f-595129ca8723",
    "group": "Dom",
    "name": "createElement",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.appendChild(childEle)"
    ],
    "outputs": [
      "The appendChild() method appends a node as the last child of a node.",
      "Tip: If you want to create a new paragraph, with text, remember to create the text as a Text node which you append to the paragraph, then append the paragraph to the document.",
      "Tip: Use the insertBefore() method to insert a new child node before a specified, existing, child node."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c1396bc2940350ba041c",
    "id": "3fc58aec-4be8-445f-b9ae-25f575bc4864",
    "group": "Dom",
    "name": "appendChild",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.removeChild(childEle)"
    ],
    "outputs": [
      "The removeChild() method removes a specified child node of the specified element. Returns the removed node as a Node object, or null if the node does not exist.",
      "Note: The removed child node is no longer part of the DOM. However, with the reference returned by this method, it is possible to insert the removed child to an element at a later time"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c1bf6bc2940350ba041d",
    "id": "cd83c48e-bd32-4668-8a2f-25b1c44e5115",
    "group": "Dom",
    "name": "removeChild",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.replaceChild(newChildEle, oldChileEle)"
    ],
    "outputs": [
      "The replaceChild() method replaces a child node with a new node.  The new node could be an existing node in the document, or you can create a new node.",
      ""
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c2046bc2940350ba041e",
    "id": "7dbec5df-6e8d-463e-9344-7115faa23290",
    "group": "Dom",
    "name": "replaceChild",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var dupeEle = ele.cloneNode([deep])",
      "deep - optional"
    ],
    "outputs": [
      "The cloneNode() method creates a copy of a node, and returns the clone.  The cloneNode() method clones all attributes and their values."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c26a6bc2940350ba041f",
    "id": "954f74df-4a43-4289-918d-d52870709020",
    "group": "Dom",
    "name": "cloneNode",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.insertBefore(newEle, refEle);"
    ],
    "outputs": [
      "The insertBefore() method inserts a node as a child, right before an existing child, which you specify."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c2ac6bc2940350ba0420",
    "id": "6fea8c2c-9f81-4d76-82c5-5782693108ab",
    "group": "Dom",
    "name": "insertBefore",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.setAttribute(name, value);"
    ],
    "outputs": [
      "The setAttribute() method adds the specified attribute to an element, and gives it the specified value."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c3686bc2940350ba0421",
    "id": "4c2f62c9-fed9-4bae-967c-381d1aeeddf1",
    "group": "Dom",
    "name": "setAttribute",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.getAttribute(name);"
    ],
    "outputs": [
      "The getAttribute() method returns the value of the attribute with the specified name, of an element.",
      "Tip: Use the getAttributeNode() method if you want to return the attribute as an Attr object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c3bc6bc2940350ba0422",
    "id": "2676b413-b971-4dbd-81cc-2c1e8cb063c1",
    "group": "Dom",
    "name": "getAttribute",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ele.removeAttribute(name);"
    ],
    "outputs": [
      "The removeAttribute() method removes the specified attribute from an element.",
      "The difference between this method and the removeAttributeNode() method is that the removeAttributeNode() method removes the specified Attr object, while this method removes the attribute with the specified name. The result will be the same. Also this method has no return value, while the removeAttributeNode() method returns the removed attribute, as an Attr object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c4156bc2940350ba0423",
    "id": "315c6050-a9c7-430f-9712-0bade2b71a55",
    "group": "Dom",
    "name": "removeAttribute",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "document.getElementById(\"demo\");"
    ],
    "outputs": [
      "The getElementById() method returns the element that has the ID attribute with the specified value."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c5156bc2940350ba0424",
    "id": "ce966afe-4e38-4083-9db2-41930a58a59c",
    "group": "Dom",
    "name": "getElementById",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "document.getElementsByTagName(\"LI\");"
    ],
    "outputs": [
      "The getElementsByTagName() method returns a collection of all elements in the document with the specified tag name, as an HTMLCollection object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ed7c57f6bc2940350ba0425",
    "id": "8b00ecc8-7124-4515-9241-1926a280f00e",
    "group": "Dom",
    "name": "getElementsByTagName",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var str = \"Visit W3Schools!\"; var n = str.search(\"W3Schools\");"
    ],
    "outputs": [
      "The search() method searches a string for a specified value and returns the position of the match"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd3f1a2882420f4570967",
    "id": "ac5afd33-3887-4e86-8251-83773ce3d489",
    "group": "RegExp",
    "name": "search",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var str = \"Visit Microsoft!\"; var res = str.replace(\"Microsoft\", \"W3Schools\");"
    ],
    "outputs": [
      "The replace() method replaces a specified value with another value in a string:"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd418a2882420f4570968",
    "id": "cc00814f-2b9a-4fec-95b9-cf4e8ffea046",
    "group": "RegExp",
    "name": "replace",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "Modifiers can be used to perform case-insensitive more global searches"
    ],
    "outputs": [
      "i\tPerform case-insensitive matching",
      "g\tPerform a global match (find all matches rather than stopping after the first match)",
      "m\tPerform multiline matching"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd4cea2882420f4570969",
    "id": "4ad41862-4c21-4e2c-9c4e-32b3c19efbdb",
    "group": "RegExp",
    "name": "Modifiers",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "[abc]\tFind any of the characters between the brackets",
      "[0-9]\tFind any of the digits between the brackets\t",
      " (x|y)\tFind any of the alternatives separated with |"
    ],
    "outputs": [
      "Brackets are used to find a range of characters:"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd57da2882420f457096a",
    "id": "5fdf2488-1dc4-4a15-a428-21012532392b",
    "group": "RegExp",
    "name": "Patterns - Brackets",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "\\d\tFind a digit",
      "\\s\tFind a whitespace character",
      "\\b\tFind a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b",
      "\\uxxxx\tFind the Unicode character specified by the hexadecimal number xxxx"
    ],
    "outputs": [
      "Metacharacters are characters with a special meaning"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd723a2882420f457096b",
    "id": "b014f3f7-3509-46b4-8eb5-b387c887de1b",
    "group": "RegExp",
    "name": "Patterns - Metacharacters",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "n+\tMatches any string that contains at least one n",
      "n*\tMatches any string that contains zero or more occurrences of n",
      "n?\tMatches any string that contains zero or one occurrences of n"
    ],
    "outputs": [
      "Quantifiers define quantities"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd782a2882420f457096c",
    "id": "bc22760d-7645-4ff3-9513-a38c4c3199bb",
    "group": "RegExp",
    "name": "Patterns - Quantifiers",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "var patt = /e/; patt.test(\"The best things in life are free!\");",
      "/e/.test(\"The best things in life are free!\");"
    ],
    "outputs": [
      "It searches a string for a pattern, and returns true or false, depending on the result."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5edfd7e7a2882420f457096d",
    "id": "dc328a38-f894-4527-a96b-9bf07d0dc507",
    "group": "RegExp",
    "name": "test",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$( \".inner\" ).after( \"<p>Test</p>\" );"
    ],
    "outputs": [
      "Insert content, specified by the parameter, after/before each element in the set of matched elements."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f5d8a2882420f457096e",
    "id": "08df8271-fdd2-4f83-a6fe-c926c8edb8fb",
    "group": "jQuery",
    "name": "after/ before",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$( \".target\" ).change(function() {   alert( \"Handler for .change() called.\" ); });"
    ],
    "outputs": [
      "Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element.  // javascript addEventListener('change'"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f5f1a2882420f457096f",
    "id": "a7e370d4-cdf8-4990-8d4a-b618242df4df",
    "group": "jQuery",
    "name": "change",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$('#wrap').data('myKey', 'myValue'); $('#wrap').data('myKey');",
      "$('#container').removeData('myKey');"
    ],
    "outputs": [
      "Store/Remove arbitrary data associated with the matched elements."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f61da2882420f4570970",
    "id": "f1c59d03-0039-426f-bfef-cb54e160d363",
    "group": "jQuery",
    "name": "data/removeData",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "div.queue( \"fx\" );"
    ],
    "outputs": [
      "Show or manipulate the queue of functions to be executed on the matched elements."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f640a2882420f4570971",
    "id": "4249a260-6083-48ba-b8c4-2adcfcc92a13",
    "group": "jQuery",
    "name": "queue/dequeue",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$( \"#foo\" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );"
    ],
    "outputs": [
      "Set a timer to delay execution of subsequent items in the queue."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f65da2882420f4570972",
    "id": "eda34b88-2502-472e-a729-5a0e6f7c51eb",
    "group": "jQuery",
    "name": "delay",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "ps.eq(1).addClass('emphasis');"
    ],
    "outputs": [
      "Reduce the set of matched elements to the one at the specified index."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f680a2882420f4570973",
    "id": "87374edf-afdf-47fe-aac8-023886b8c29d",
    "group": "jQuery",
    "name": "eq",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$( \"li\" ).get( 0 )"
    ],
    "outputs": [
      "Retrieve the DOM elements matched by the jQuery object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f69aa2882420f4570974",
    "id": "b083a067-7219-405e-a2d8-456ff672d4d4",
    "group": "jQuery",
    "name": "get",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$.grep( [ 0, 1, 2 ], function( n, i ) {   return n > 0; });"
    ],
    "outputs": [
      "Finds the elements of an array which satisfy a filter function. The original array is not affected."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f6b8a2882420f4570975",
    "id": "6828ffb0-75bd-45a0-ac61-5f8bc5ed350a",
    "group": "jQuery",
    "name": "$.grep",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$(':animated'); // returns all elements currently animating",
      "$(':contains(me)'); // returns all elements with the text 'me'",
      "$(':empty'); // returns all elements with no child nodes or text",
      "$(':parent'); // returns all elements with child nodes or text",
      "$('li:even'); // returns all even-index elements (in this case, &lt;li&gt;s); $('li:odd');",
      "$(':header'); // returns all h1 - h6s.",
      "$('li:gt(4)'); // returns all elements with an (zero-based) index greater than the given number",
      "$('li:lt(4)'); // returns all element with an index less than the given number",
      "$(':only-child'); "
    ],
    "outputs": [
      "Sizzle, the CSS Selector engine inside jQuery, offers quite a few pseudo-selectors to make the job of selecting the elements you want easy"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f721a2882420f4570976",
    "id": "9ebef9bb-7d80-4535-8931-6d4951494c00",
    "group": "jQuery",
    "name": "Pseudo-Selectors",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$.isArray([1, 2, 3]); // returns true",
      "$.isEmptyObject({}); // returns true",
      "$.isFunction(function () { /****/ }); // returns true",
      "$.isPlainObject({})); // returns true",
      "$.isPlainObject(new Object()); // returns true"
    ],
    "outputs": [
      ""
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f77da2882420f4570977",
    "id": "c4e0607c-f6c5-42a9-b9c2-8812be4e1631",
    "group": "jQuery",
    "name": "isArray/isEmptyObject/isFunction/isPlainObject",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "$.isArray(ps);"
    ],
    "outputs": [
      "Convert an array-like object into a true JavaScript array."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ee0f7a1a2882420f4570978",
    "id": "3714b112-7fba-4c0d-9ba9-ac2d0585a135",
    "group": "jQuery",
    "name": "$.makeArray",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "  let elem = document.getElementById(\"test\");   let cssObj = getComputedStyle(elem, null);"
    ],
    "outputs": [
      "The getComputedStyle() method gets all the actual (computed) CSS property and values of the specified element.",
      "The computed style is the style actually used in displaying the element, after \"stylings\" from multiple sources have been applied.",
      "Style sources can include: internal style sheets, external style sheets, inherited styles and browser default styles.",
      "The getComputedStyle() method returns a CSSStyleDeclaration object."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5eed29562aa08b36fc21f969",
    "id": "dcfc73b5-445f-4c2c-9240-5af5a0a201cc",
    "group": "Dom",
    "name": "getComputedStyle",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const object1 = {   a: 'somestring',   b: 42,   c: false };",
      "console.log(Object.keys(object1)); // expected output: Array [\"a\", \"b\", \"c\"]"
    ],
    "outputs": [
      "returns an array of a given object's own enumerable property names, iterated in the same order that a normal loop would."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef1095d2aa08b36fc21f96a",
    "id": "056badaf-5f2c-44fa-be8b-898e82c06a42",
    "group": "function",
    "name": "Object.keys",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "<input type=\"text\" name=\"txt\" value=\"Hello\" onchange=\"myFunction(this.value)\">"
    ],
    "outputs": [
      "An HTML element has been changed"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4bfa7b2d6b916ec1d23bd",
    "id": "c9b34fac-1f75-40f2-9ba7-017f9d81d6fc",
    "group": "HTML Events",
    "name": "onchange",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "The user clicks an HTML element"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4bfc3b2d6b916ec1d23be",
    "id": "f498f834-1c86-40f5-a62c-a360f4e5fb78",
    "group": "HTML Events",
    "name": "onclick",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "The user moves the mouse over an HTML element"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4bfd9b2d6b916ec1d23bf",
    "id": "d86ca036-e0be-4871-a579-dfdbcaf7b707",
    "group": "HTML Events",
    "name": "onmouseover",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "The user moves the mouse away from an HTML element"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4bff1b2d6b916ec1d23c0",
    "id": "24328f22-e0df-405a-bd80-8437942d88ea",
    "group": "HTML Events",
    "name": "onmouseout",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "The user pushes a keyboard key"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4c007b2d6b916ec1d23c1",
    "id": "55f3cbc4-7cf9-4c16-8bba-a2b170288b5b",
    "group": "HTML Events",
    "name": "onkeydown",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      ""
    ],
    "outputs": [
      "The browser has finished loading the page"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4c01eb2d6b916ec1d23c2",
    "id": "aa4ba092-753e-4343-93d3-0e3f68e3b61d",
    "group": "HTML Events",
    "name": "onload",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "event.preventDefault()"
    ],
    "outputs": [
      "The preventDefault() method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4c1c9b2d6b916ec1d23c3",
    "id": "fa8d781b-4c00-43b3-be32-b2951fa62e72",
    "group": "HTML Events",
    "name": "preventDefault",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "event.stopPropagation()"
    ],
    "outputs": [
      "The stopPropagation() method prevents propagation of the same event from being called."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5ef4c21ab2d6b916ec1d23c4",
    "id": "e81817fb-9fc3-4ccd-8b75-1ab057f131ef",
    "group": "HTML Events",
    "name": "stopPropagation",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "  constructor(props) {     super(props);     this.state = {favoritecolor: \"red\"};   }"
    ],
    "outputs": [
      "The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.",
      "The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component)."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32a77fc7c5c32030073081",
    "id": "6247cd36-f4cb-42d0-a329-720cfe6f95dd",
    "group": "reactLifeCycle",
    "name": "constructor",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "static getDerivedStateFromProps(props, state) {     return {favoritecolor: props.favcol };   }"
    ],
    "outputs": [
      "The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.",
      "This is the natural place to set the state object based on the initial props.",
      "It takes state as an argument, and returns an object with changes to the state.",
      "Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32a832c7c5c32030073082",
    "id": "58f815fb-4c08-4ed9-95d4-d964251d6cc8",
    "group": "reactLifeCycle",
    "name": "getDerivedStateFromProps",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "render() {     return (       <h1>This is the content of the Header component</h1>     );   }"
    ],
    "outputs": [
      "The render() method is required, and is the method that actual outputs HTML to the DOM.",
      "called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32a86ac7c5c32030073083",
    "id": "7a8f50e4-76fd-4651-bbd1-41f08fe4dcb8",
    "group": "reactLifeCycle",
    "name": "render",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "componentDidMount() {     setTimeout(() => {       this.setState({favoritecolor: \"yellow\"})     }, 1000)   }"
    ],
    "outputs": [
      "The componentDidMount() method is called after the component is rendered.",
      "This is where you run statements that requires that the component is already placed in the DOM."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32a8a3c7c5c32030073084",
    "id": "81dfc882-442a-4fe2-a1ae-7a129f14eb8c",
    "group": "reactLifeCycle",
    "name": "componentDidMount",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "shouldComponentUpdate() {     return false;   }"
    ],
    "outputs": [
      "In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not.",
      "The default value is true."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32a980c7c5c32030073085",
    "id": "0bbcb2b7-9535-4e61-a4cf-c4f62aa5b698",
    "group": "reactLifeCycle",
    "name": "shouldComponentUpdate",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "getSnapshotBeforeUpdate(prevProps, prevState) {     document.getElementById(\"div1\").innerHTML =     \"Before the update, the favorite was \" + prevState.favoritecolor;   }"
    ],
    "outputs": [
      "In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.",
      "If the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32aa01c7c5c32030073086",
    "id": "4710db52-a715-4a7c-a05f-7d39c5dbeb44",
    "group": "reactLifeCycle",
    "name": "getSnapshotBeforeUpdate",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "componentDidUpdate() {     document.getElementById(\"mydiv\").innerHTML =     \"The updated favorite is \" + this.state.favoritecolor;   }"
    ],
    "outputs": [
      "The componentDidUpdate method is called after the component is updated in the DOM."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32aa64c7c5c32030073087",
    "id": "f6da6431-b229-4b58-81b1-df643b8d02ed",
    "group": "reactLifeCycle",
    "name": "componentDidUpdate",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "componentWillUnmount() {     alert(\"The component named Header is about to be unmounted.\");   }"
    ],
    "outputs": [
      "The componentWillUnmount method is called when the component is about to be removed from the DOM."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32aa90c7c5c32030073088",
    "id": "daf32d2a-47cf-4a20-9a14-ebc6fbf33f1e",
    "group": "reactLifeCycle",
    "name": "componentWillUnmount",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const [age, setAge] = useState(42);",
      "const [name,setName] = useState({firstName:\"Raymond\",lastName:\"Huang\"});",
      "const [name,setName] = useState({firstName:\"Raymond\",lastName:\"Huang\"});",
      "<button onClick={()=>setName({...name,firstName:\"Simon\"})}>{name.firstName} {name.lastName}</button>"
    ],
    "outputs": [
      "useState returns a pair: the current state value and a function that lets you update it.",
      "You can call this function from an event handler or somewhere else. It’s similar to this.setState in a class, except it doesn’t merge the old and new state together."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32aed4c7c5c32030073089",
    "id": "8ecfbd82-3d53-4760-9ac0-2bba5287c16c",
    "group": "reactHooks",
    "name": "useState",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "  useEffect(() => {     document.title = `Clicked ${count} times`;   }, [count]);"
    ],
    "outputs": [
      "adds the ability to perform side effects from a function component. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes, but unified into a single API."
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32b632c7c5c3203007308a",
    "id": "5a6ffb3a-576e-46f5-b41a-2565d998b775",
    "group": "reactHooks",
    "name": "useEffect",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const locale = useContext(LocaleContext);"
    ],
    "outputs": [
      " lets you subscribe to React context without introducing nesting"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32b692c7c5c3203007308b",
    "id": "9f003b27-c8d3-43c8-9849-36b7f2c815d8",
    "group": "reactHooks",
    "name": "useContext",
    "helpPath": "",
    "__v": 0
  },
  {
    "snips": [
      "const [todos, dispatch] = useReducer(todosReducer);"
    ],
    "outputs": [
      "lets you manage local state of complex components with a reducer"
    ],
    "indicator": 0,
    "accepted": true,
    "_id": "5f32b6e3c7c5c3203007308c",
    "id": "1f7e05f0-e32c-44b9-b970-c6fb29123b87",
    "group": "reactHooks",
    "name": "useReducer",
    "helpPath": "",
    "__v": 0
  }
]