[
	{ 
		"group":"",
		"name": "", 
		"snip": [""],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"array",
		"name": "forEach", 
		"snip": ["employees.forEach(employee=> employee.eyeColor=='green');"],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"array",
		"name": "filter", 
		"snip": ["employees.filter(employee => employee.eyeColor=='blue');"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"array",
		"name": "sort", 
		"snip": ["employees.sort((employee,employee1) =>employee.age > employee1.age ? 1 : -1);"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"array",
		"name": "find", 
		"snip": ["employees.find(employee => employee.age < 22);"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"array",
		"name": "pop", 
		"snip": ["employees.pop();"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"array",
		"name": "shift", 
		"snip": ["employees.shift();"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"array",
		"name": "slice", 
		"snip": ["employees = employees.slice(1, 3);"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"function",
		"name": "callback", 
		"snip": [
			"let doWhatever = function (a,b){",
			"&nbsp;&nbsp;&nbsp;return `This is the two numbers you just entered ${a}, ${b}`;",
			"};",
			"let myFunction = function (a,b, callback){",
			"&nbsp;&nbsp;&nbsp;return callback(a,b);",
			"};",
			"let output = myFunction(2,3,doWhatever);",
			"document.getElementById('output').innerHTML = output;"
		],
		"output": ["This is the two numbers you just entered 2, 3"]
	},
	{ 
		"group":"function",
		"name": "call", 
		"snip": [
			"let name = {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Raymond',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
			"}",
			"let printFullName =  function (city){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in '+ city;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
			"}",
			"printFullName.call(name,'markham');"			
		],
		"output": ["Raymond Huang is living in markham"]
	},
	{ 
		"group":"function",
		"name": "apply", 
		"snip": [
			"let printFullName =  function (city,province){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in ' +city + ', '+ province;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
			"}",
			"let name =  {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Raymond',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
			"}",
			"printFullName.apply(name,['Markham','Ontario']);"
		],
		"output": ["Raymond Huang is living in Markham, Ontario"]
	}	
,
	{ 
		"group":"function",
		"name": "bind", 
		"snip": [
			"let printFullName =  function (city,province){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in ' +city + ', '+ province;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
			"}",
			"let name =  {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Cindy',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Woo',",
			"}",
			"let printMyName = printFullName.bind(name);",
			"printMyName('Toronto','Ontario');"
		],
		"output": ["Cindy Woo is living in Toronto, Ontario"]
	},
	{ 
		"group":"function",
		"name": "polyfill for bind", 
		"snip": [
			"let printName =  function (city,province,country){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname +'&nbsp;is lived in ' + city + ', '+ province + ', '+ country;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;",
			"}",
			"let name =  {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Raymond',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
			"}",
			"Function.prototype.mybind = function(...args){",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let obj = this;",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let params = args.slice(1);",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return function (...args2) {",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.apply(args[0],[...params,...args2]);",
			"&nbsp;&nbsp;&nbsp;}",
			"}",
			"let printMyName2 = printName.mybind(name,'Markham','Ontario');",
			"printMyName2('Canada');"
		],
		"output": ["Raymond Huang is lived in Markham, Ontario, Canada"]
	},
	{ 
		"group":"function",
		"name": "promise", 
		"snip": [
			"let promiseCount = 0;",
			"function MyDecision(wontDo) {",
			"&nbsp;&nbsp;&nbsp;promiseCount++;",
			"&nbsp;&nbsp;&nbsp;let log = document.getElementById('output');",
			"&nbsp;&nbsp;&nbsp;if(wontDo) log.innerHTML += promiseCount +') Do not want do my job(<small>Start looking at the task</small>)';",
			"&nbsp;&nbsp;&nbsp;else log.innerHTML += promiseCount +') Started doing my job(<small>Beging my task</small>)';",
			"&nbsp;&nbsp;&nbsp;let promise1 = new Promise((resolve, reject) => {",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wontDo) return reject([promiseCount,'I am tired']);",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.innerHTML += promiseCount +') Working as promised (<small>promise started</small>)';",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(() =>resolve(promiseCount), Math.random() * 2000 + 1000);",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}",
			"&nbsp;&nbsp;&nbsp;}",
			"&nbsp;&nbsp;&nbsp;).then((val) =>log.innerHTML += val +') My job is done (<small>promise fullfiled and ended</small>)')",
			"&nbsp;&nbsp;&nbsp;.catch((reason) =>log.innerHTML += reason[0] +') Promise rejected resason: ' + reason[1]+'');",
			"&nbsp;&nbsp;&nbsp;log.innerHTML += promiseCount +') Promise ' + (wontDo ? 'rejected' : '&nbsp;made') + '(<small>Sync code terminated</small>)",
			"}"		
		],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"function",
		"name": "findIndex", 
		"snip": ["let ages = [3, 10, 18, 20];",
				"function checkAdult(age) {",
				"&nbsp;&nbsp;&nbsp;return age >= 18;",
				"}",
				"function myFunction() {",
				"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = ages.findIndex(checkAdult);",
				"}"
		],
		"output": ["2"]
	},
	{ 
		"group":"function",
		"name": "includes", 
		"snip": [ "function myFunction() {",
				  "&nbsp;&nbsp;&nbsp;let str = 'Hello world, welcome to the universe.';",
				  "&nbsp;&nbsp;&nbsp;let n = str.includes('world');",
				  "&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = n;",
				  "}"
				],
		"output": ["true"]
	},
	{ 
		"group":"function",
		"name": "padStart", 
		"snip": [
					"const str1 = '5';",
					"document.getElementById('output').innerHTML = str1.padStart(2, '0'));",
					"const fullNumber = '2034399002125581';",
					"const last4Digits = fullNumber.slice(-4);",
					"const maskedNumber = last4Digits.padStart(fullNumber.length, '*');",
					"document.getElementById('output').innerHTML = maskedNumber);"
		],
		"output": ["05","************5581"]
	},
	{ 
		"group":"function",
		"name": "padEnd", 
		"snip": [
					"const str1 = 'Breaded Mushrooms';",
					"document.getElementById('output').innerHTML = str1.padEnd(25, '.');",
					"const str2 = '200';",
					"document.getElementById('output').innerHTML = str2.padEnd(5);"
		],
		"output": ["Breaded Mushrooms........","200  "]
	},
	{ 
		"group":"function",
		"name": "await", 
		"snip": [
					"function resolveAfter2Seconds(x) {",
					"&nbsp;return new Promise(resolve => {",
					"&nbsp;&nbsp;setTimeout(() => {",
					"&nbsp;&nbsp;&nbsp;resolve(x);",
					"&nbsp;&nbsp;}, 2000);",
					"&nbsp;});",
					"}",
					"async function f1() {",
					"&nbsp;var x = await resolveAfter2Seconds(10);",
					"&nbsp;document.getElementById('output').innerHTML = x;",
					"}",
					"f1();"		
		],
		"output": ["10"]
	},
	{ 
		"group":"function",
		"name": "entries", 
		"snip": [
					"const object1 = {",
					"&nbsp;a: 'somestring',",
					"&nbsp;b: 42",
					"};",
					"for (let [key, value] of Object.entries(object1)) {",
					"&nbsp;document.getElementById('output').innerHTML = `${key}: ${value}`;",
					"}"
		],
		"output": ["a: somestring","b: 42"]
	},
	{ 
		"group":"function",
		"name": "values", 
		"snip": [
					"const object1 = {",
					"&nbsp;a: 'somestring',",
					"&nbsp;b: 42,",
					"&nbsp;c: false",
					"};",
					"document.getElementById('output').innerHTML = Object.values(object1);"
		],
		"output": ["Array ['somestring', 42, false]"]
	},
	{ 
		"group":"rxjs",
		"name": "of", 
		"snip": ["const personObs : Observable<Person> = of(person);",
				 "personObs.subscribe(data=>console.log(data.name));"
				],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"decorator",
		"name": "Input", 
		"snip": [
			"@Input()  user: User;",
			"@Input()  parentClick: Subject &lt;void&gt;;",
			"parentClick:Subject<void> = new Subject<void>(); //in parent"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"decorator",
		"name": "Output", 
		"snip": ["@Output() onSelect: EventEmitter<User>  = new EventEmitter;"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"decorator",
		"name": "ViewChild", 
		"snip": [
		"@ViewChild('selectRef', {static: false}) selectEleRef : ElementRef;",
		"@ViewChild(UserListComponent,{static:false}) userListComponent : UserListComponent;"
		],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"decorator",
		"name": "ViewChildren", 
		"snip": ["@ViewChildren(ShowCaseComponent) showCaseComponent : ShowCaseComponent;"],
		"output": [""],
		"helpPath" : "",
	},
	{ 
		"group":"decorator",
		"name": "Directive", 
		"snip": ["@Directive({selector: '[appMediaQueryFlexbox]'})"],
		"output": ["<div appMediaQueryFlexbox></div>"],
		"helpPath" : "angular/media-query-flexbox.directive.txt",
		"fireCaseName": ""
	},
	{ 
		"group":"decorator",
		"name": "HostListener", 
		"snip": ["@HostListener('mouseover') onMouseOver() {this.ishovering = true;}"],
		"output": [""],
		"helpPath" : "angular/hover-item.directive.txt",
		"fireCaseName": ""
	},
	{ 
		"group":"decorator",
		"name": "HostBinding", 
		"snip": ["@HostBinding('class.item-mouse-over') ishovering: boolean;"],
		"output": [""],
		"helpPath" : "angular/hover-item.directive.txt",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "concat", 
		"snip": ["const getPostOne$ = Rx.Observable.timer(3000).mapTo({id: 1});",
				 "const getPostTwo$ = Rx.Observable.timer(1000).mapTo({id: 2});",
				 "Rx.Observable.concat(getPostOne$, getPostTwo$)",
				 ".subscribe(res => console.log(res));"
				],
		"output": [""],
		"helpPath" : "rxjs/concat.txt",
		"fireCaseName": "concat"
	},
	{ 
		"group":"Rxjs",
		"name": "forkJoin", 
		"snip": ["const getPostOne$ = Rx.Observable.timer(1000).mapTo({id: 1});",
				 "const getPostTwo$ = Rx.Observable.timer(2000).mapTo({id: 2});",
				 "Rx.Observable.forkJoin(getPostOne$, getPostTwo$)",".subscribe(res => console.log(res)) "
				],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "mergeMap", 
		"snip": ["const post$ = Rx.Observable.of({id: 1});",
				 "const getPostInfo$ = Rx.Observable.timer(3000)",
				 ".mapTo({title: 'Post title'});",
				 "const posts$ = post$.mergeMap(post =>", "getPostInfo$).subscribe(res => console.log(res));"
				],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "pairwise", 
		"snip": ["Rx.Observable.fromEvent(document, 'scroll')",
				 ".map(e => window.pageYOffset).pairwise()",
				 ".subscribe(pair => console.log(pair));"
				],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "switchMap", 
		"snip": ["const clicks$ = Rx.Observable.fromEvent(document, 'click');",
				 "const innerObservable$ = Rx.Observable.interval(1000);",
				 "clicks$.switchMap(event => innerObservable$)",
                 ".subscribe(val => console.log(val));"
				],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "combineLatest", 
		"snip": ["const intervalOne$ = Rx.Observable.interval(1000);",
				 "const intervalTwo$ = Rx.Observable.interval(2000);",
				 "Rx.Observable.combineLatest(intervalOne$,intervalTwo$)",".subscribe(all => console.log(all));"
				],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "tap", 
		"snip": [""],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "pluck", 
		"snip": [""],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "catchError", 
		"snip": [""],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "debounce", 
		"snip": [""],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	},
	{ 
		"group":"Rxjs",
		"name": "pipe", 
		"snip": [""],
		"output": [""],
		"helpPath" : "",
		"fireCaseName": ""
	}
	
]